
fluid_binding mark;
fluid_binding repl;
macro fluid repl() {NULL;}
fluid_syntax quasiquote;

Syntax * mm(Syntax * in, Environ * env) {
  Mark * mark = new_mark();
  Match * m = match_f(0, syntax (pattern, with), in);
  Syntax * pattern = m->var(syntax pattern);
  Environ * lenv = temp_environ(env);
  pre_parse(replace(raw_syntax(kill_fluid (` quasiquote syntax)),
                    NULL, mark), lenv);
  pattern = partly_expand(pattern, ExpPos, lenv);
  //assert(pattern->is_a("syntax", "quasiquote"));
  //dump_syntax(pattern);
  pattern = pattern->part(1);
  //dump_syntax(pattern);
  SyntaxList * aqs = gather_antiquotes(pattern);
  pattern = mark_antiquotes(pattern, aqs);
  SyntaxEnum * iter = aqs->elements();
  SyntaxList * assign = new_syntax_list();
  Syntax * aq;
  while ((aq = iter->next())) {
    assign->append(replace(syntax {$1 = match_aq_var(m, syntax_d $2);},
                           match_local(m, aq, aq),
                           mark));
  }
  UnmarkedSyntax * res = syntax {({
    Match * m = match_f(repl, syntax_d $1, with);
    $2;
    m;
  });};
  return replace(res, match_local(m, pattern, assign, NULL), mark);  
}

make_macro mm;

Syntax * qq(Syntax * in, Environ * env) {
  Mark * outer_mark = new_mark();
  Match * m = match_f(0, raw_syntax (pattern), in);
  SyntaxList * aqs = gather_antiquotes(m->var(syntax pattern));
  UnmarkedSyntax * res = syntax {
    replace(syntax pattern, match_antiquotes(repl, syntax_d $1, $2, NULL), mark);
  };
  return replace(res, match_local(m, aqs, aqs, NULL), outer_mark);
}

make_syntax_macro fluid quasiquote qq;

Syntax * test(Syntax * in, Environ * env) {
  Mark * fluid mark = new_mark;
  Syntax *a, *b;
  mm(`[$a,$b], in);
  return `{1 + $a + $b};
  //return `(plus $a $b);
}

make_macro test;


int main() {
  printf("%d\n", test(2,4));
  return 0;
}

