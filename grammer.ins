(smap while (TEST BODY) (continue)
     (loop (block 
             (local_label (mid continue))
             (lstmt (mid continue)
               (if (mid TEST) (noop) (break)))
             (mid BODY))))

(smap do (BODY TEST) (continue)
     (loop (block 
             (local_label (mid continue))
             (mid BODY)
             (lstmt (mid continue) (mid TEST) (noop) (break)))))

(smap for (INIT TEST POST BODY) (continue)
      (block 
               (mid INIT)
               (loop (block
                 (local_label (mid continue))
                 (if (mid TEST) (noop) (break))
                 (mid BODY)
                 (lstmt (mid continue)
                   (mid POST))))))

(smap continue () (continue)
       (goto (id (mid continue))))

#(smap "()" (...)
#    (exp ...))

#(smap "{}" (...)
#    (block ...))

(smap or (x y) ()
    (eif (mid x) (literal 1) (mid y)))

(smap and (x y) ()
    (eif (mid x) (mid y) (literal 0)))

(smap ? (test (":" if_true if_false)) ()
    (eif (mid test) (mid if_true) (mid if_false)))

(smap -> (exp id) ()
    (member (deref (mid exp)) (mid id)))

(smap ".[]" (x y) ()
    (deref (plus (mid x) (mid y))))

(smap preinc (x) ()
    (plus_eq (mid x) (literal 1)))

(smap predec (x) ()
    (minus_eq (mid x) (literal 1)))

#(smap postinc (x)
#    (block (stmt (id int) (id `x) (sym =) (id x))
#           (stmt (sym ++) (id x))
#           (stmt (id `x))))

