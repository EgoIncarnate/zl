include_file "macro_api.zlh";
include_file "qquote.zl";
include_file "class.zl";

Syntax * parse_make_syntax_macro(Syntax * p, Environ * env) {
  Mark * mark = new_mark();
  Match * m = match_f(0, raw_syntax (name @ fun @rest), p);

  if (m->var(syntax fun))
    return replace(raw_syntax(make_macro (` name syntax) fun @rest), m, mark);
  else
    return replace(raw_syntax(make_macro (` name syntax) name @rest), m, mark);
}

Syntax * partly_expand_class(Syntax * p, Mark * mark, Environ * env) {
  Match * m = match_parts_f(0, raw_syntax (what name @ body @rest), p);
  Syntax * body = m->var(syntax body);
  if (!body) return p;
  Environ * lenv = temp_environ(env);
  pre_parse(replace(raw_syntax (declare_user_type name), m, mark), lenv);
  lenv = new_scope(lenv, replace(syntax name`outer, m, mark));
  SyntaxList * new_body = new_syntax_list();
  SyntaxEnum * itr = partly_expand_list(body->args(), FieldPos, lenv);
  Syntax * member;
  while ((member = itr->next)) {
    Match * m0 = match_parts_f(m, raw_syntax (what n @ type @_), member);
    const char * what = m0 ? syntax_to_string(m0->var(syntax what)) : " ";
    if (strcmp(what, "var") == 0 || strcmp(what, "alias") == 0 
        || strcmp(what, "fun") == 0 || strcmp(what, "add_prop") == 0)
      new_body->append(member);
    else // some sort of type definition
      new_body->append(pre_parse(member, lenv));
  }
  return replace(raw_syntax(what name ({...} @$1) @rest), 
                 match_local(m, new_body, NULL), mark);
}

Syntax * parse_enum(Syntax * p, Environ * env) {
  //printf("%s\n", syntax_to_string(p));
  Mark * mark = new_mark(prelude_envss);
  Match * m = match_f(0, raw_syntax(name @ (pattern ({,} @members))), p);
  if (strcmp(syntax_to_string(m->var(syntax name)), "") == 0)
    m = match_f(m, syntax name, replace(syntax anon, m, mark));
  Syntax * res;
  if (m->var(syntax members)) {
    res = replace(raw_syntax(<@ (@ (.enum name @members) (talias name (enum name)))
                             (.type name)), m, mark);
  } else {
    res = replace(raw_syntax(<@ (talias name (enum name))
                             (.type name)), m, mark);
  }
  return res;
}

