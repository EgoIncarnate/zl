
@InProceedings{	  peg-p,
  author	= {Bryan Ford},
  title		= {Packrat Parsing: Simple, Powerful, Lazy, Linear Time},
  booktitle	= {Proc. Intl. Conf. Functional Programming (ICFP)},
  year		= {2002},
  isbn		= {1-58113-487-8},
  pages		= {36--47},
  address	= {Pittsburgh, PA},
  doi		= {http://doi.acm.org/10.1145/581478.581483}
}

@InProceedings{	  peg,
  author	= {Bryan Ford},
  title		= {Parsing expression grammars: a recognition-based syntactic
		  foundation},
  booktitle	= {Proc. POPL},
  year		= {2004},
  isbn		= {1-58113-729-X},
  pages		= {111--122},
  address	= {Venice, Italy},
  doi		= {http://doi.acm.org/10.1145/964001.964011}
}

@InProceedings{	  peg-grimm,
  author	= {Robert Grimm},
  title		= {Better extensibility through modular syntax},
  booktitle	= {Proc. PLDI},
  year		= {2006},
  isbn		= {1-59593-320-4},
  pages		= {38--51},
  address	= {Ottawa, Ontario},
  doi		= {http://doi.acm.org/10.1145/1133981.1133987}
}

@MastersThesis{	  peg-thesis,
  author	= {Bryan Ford},
  title		= {Packrat Parsing: A Practical Linear-Time Algorithm with
		  Backtracking},
  school	= {Massachusetts Institute of Technology},
  year		= {2002}
}

@Article{	  syn-abst,
  author	= {R. Kent Dybvig and Robert Hieb and Carl Bruggeman},
  title		= {Syntactic abstraction in {Scheme}},
  journal	= {Lisp and Symbolic Computation},
  volume	= {5},
  number	= {4},
  year		= {1992},
  issn		= {0892-4635},
  pages		= {295--326},
  doi		= {http://dx.doi.org/10.1007/BF01806308},
  publisher	= {Kluwer Academic Publishers},
  address	= {Hingham, MA}
}

@InCollection{	  syntax-case,
  author	= {R. Kent Dybvig},
  title		= {Syntactic abstraction: the syntax-case expander},
  booktitle	= {Beautiful Code: Leading Programmers Explain How They
		  Think},
  chapter	= 25,
  editor	= {Andy Oram and Greg Wilson},
  publisher	= {O'Reilly and Associates},
  month		= jun,
  year		= 2007,
  pages		= {407--428},
  biburl	= {http://www.cs.indiana.edu/~dyb/pubs/bc-syntax-case.bib},
  texturl	= {http://www.cs.indiana.edu/~dyb/pubs/bc-syntax-case.pdf},
  annote	= {Provides a description and examples of the syntax-case
		  expansion algorithm}
}

@TechReport{	  plt-tr1,
  title		= {Reference: Racket},
  author	= {Matthew Flatt and PLT},
  number	= {PLT-TR-2010-1},
  institution	= {PLT Inc.},
  year		= {2010},
  note		= {\url{http://racket-lang.org/tr1/}}
}

@InProceedings{	  syn-parm,
  author	= {Eli Barzilay and Ryan Culpepper and Matthew Flatt},
  title		= {Keeping it Clean with Syntax Parameters},
  booktitle	= {Proc. Workshop on Scheme and Functional Programming},
  year		= {2011},
  address	= {Portland, OR}
}

@Article{	  opp,
  author	= {Floyd,, Robert W.},
  title		= {Syntactic Analysis and Operator Precedence},
  journal	= {J. ACM},
  volume	= {10},
  number	= {3},
  year		= {1963},
  issn		= {0004-5411},
  pages		= {316--333},
  doi		= {http://doi.acm.org/10.1145/321172.321179}
}

@InProceedings{	  randprog,
  title		= {Volatiles Are Miscompiled, and What to Do about It},
  author	= {Eric Eide and John Regehr},
  year		= 2008,
  booktitle	= {Proc. Intl. Conf. on Embedded Software (EMSOFT)}
}

@InProceedings{	  abi-gpce10,
  author	= {Kevin Atkinson and Matthew Flatt and Gary Lindstrom},
  title		= {{ABI} Compatibility Through a Customizable Language},
  booktitle	= {Proc. Generative Programming and Component Engineering
		  (GPCE)},
  year		= {2010},
  isbn		= {978-1-4503-0154-1},
  address	= {Eindhoven, The Netherlands},
  pages		= {147--156},
  numpages	= {10},
  doi		= {http://doi.acm.org/10.1145/1868294.1868316}
}

@InProceedings{	  zl-scheme11,
  author	= {Kevin Atkinson and Matthew Flatt},
  title		= {Adapting {Scheme}-Like Macros to a {C}-Like Language},
  booktitle	= {Proc. Workshop on Scheme and Functional Programming},
  year		= {2011},
  address	= {Portland, Oregon}
}

@PhDThesis{	  abi-diss,
  author	= {Kevin Atkinson},
  title		= {{ABI} Compatibility Through a Customizable Language},
  school	= {University of Utah},
  year		= {2011}
}
