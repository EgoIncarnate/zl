include_file "abi_info.zlh";
import_file "class-simple.zlh";

/* 
 * Example class definition 
 * (slightly out of date)
 *

  class Y : public X {
    struct D {
      ...
    };
    D d;
    virtual Y make_y();
    virtual D foo();
  }

  user_type Y {
    make_subtype X; // this must come first otherwise X may be redefined by import
    import X;
    struct D {
    };
    class _VTable;
    struct _Data {
      _VTable * _vptr;
      ...
    };
    finalize user_type _Data;
    class _VTable { / must come after _Data and finalize user_type;
      Y (*make_y)();
      D (*foo());
    }
    static _VTable _vtable;
    ...
    now come access macros and functions in the order they appear
    ...
    init() : static_constructor ...;
    map _vptr ...;
    void _constructor() ..;
  }
 */

typedef struct Collect {
  bool virtual_override;
  Syntax * this_type;
} Collect;

.class ConstructorCode {
public:
  Syntax * field;
  Syntax * name;
  Syntax * type;
  Syntax * code;
  ConstructorCode * next;
};

.class ParseClass {
public:
  Mark * mark_;
  macro fluid mark() {mark_}

  Match * m;
  macro fluid repl() {m}

  Syntax * class_s;
  Environ * env;

  Syntax * name;
  Syntax * body;
  Syntax * parent_s;

  UserType * parent;

  Context * context;

  Environ * lenv;
  
  Module * parent_m;
  UserType * parent_vtable;
  Syntax * parent_vtable_n;
  Syntax * vtable;
  SyntaxList * struct_p;
  SyntaxList * struct_b;
  UserTypeBuilder * builder;
  //SyntaxList * module_p;
  //SyntaxList * module_b;
  SyntaxList * vtable_b;
  SyntaxList * vtable_i;
  SyntaxList * exports;
  SyntaxList * fields;

  SyntaxList * constructors;

  bool need_constructor;
  ConstructorCode * constructor_code;
  ConstructorCode * * constructor_code_ip;
  void add_constructor_field(Syntax * f, Syntax * nm, Syntax * t, Syntax * c) {
    ConstructorCode * n = new ConstructorCode;
    n->field = f;
    n->name = nm;
    n->type = t;
    n->code = c;
    n->next = NULL;
    *constructor_code_ip = n;
    constructor_code_ip = &n->next;
  }
  void add_constructor_code(Syntax * c) {
    add_constructor_field(NULL, NULL, NULL, c);
  }

  bool need_copy_constructor;
  SyntaxList * copy_constructor_code;

  bool need_assign;
  SyntaxList * assign_code;
  //Syntax * assign;

  bool need_destructor;
  SyntaxList * destructor_code;
  Syntax * destructor;
  Collect destructor_collect;

  virtual Syntax * parse(Syntax * p_, Environ * e_, Mark * m_) {

    //printf("CLASS = \n");
    //dump_syntax(p_);
    //printf("--------\n");

    class_s = p_;
    env = e_;
    mark_ = m_ ? m_ : new_mark_f(prelude_envss, true, NULL, NULL);
    
    init_match();
    
    if (!body) {
      //printf("DONE (declare only) %s\n", syntax_to_string(name));
      return `(<@ (declare_user_type name) (.type name));
    }

    if (name->part(0)->eq(syntax ::)) {
      Match * m0 = match_parts_f(0, raw_syntax (what (pattern (:: module name)) @rest), p_);
      return replace(raw_syntax(memberdecl module (what name @rest)), m0, mark);
    }

    init();

    builder->add(`(add_prop ptr $(Syntax::stash_ptr(this))));
    builder->add(`(add_prop syntax_obj $p_));
    builder->add(`{make_macro memberdecl`syntax parse_memberdecl;});
                 
    if (parent) {
      import_parent();
      init_parent_info();
      add_parent_info();
    }

    add_other_info();

    Syntax * err = parse_body();
    if (err) return err;

    parse_special_forward();

    if (!vtable_i->empty())
      create_vtable();

    builder->add(`(.struct _Data @$struct_p @$struct_b));
    builder->add(`(finalize_user_type ((` _Data tag))));
    builder->add(`(add_prop fields (. @$fields)));

    //module_b->append(replace(
    //                   syntax {export $1;},
    //                   match_local(m, exports, 0),
    //                   mark));

    create_special();

    Syntax * res = builder->to_syntax();
    res = `(<@ $res (.type name));
    //printf("DONE %s\n", syntax_to_string(name));
    //dump_syntax(res);
    //printf("---\n");
    return res;
  }

  virtual void init_match() {
    m = match_f(0, raw_syntax (name @ body :(public parent_n) :(vtable_class (reparse vtable_class class))), class_s, mark);
    name = m->var(syntax name);
    if (strcmp(syntax_to_string(name), "") == 0) {
      name = replace(syntax anon, m, new_empty_mark());
      m = match_f(m, syntax name, name);
    }
    body = m->var(syntax body);
  }

  virtual void init() {
    parent_s = m->var(syntax parent_n);
    parent = parent_s ? user_type_info(parent_s, env) : NULL;

    context = empty_context();

    //printf("parse_class %s %s\n", syntax_to_string(name));
    
    parent_m = NULL;
    parent_vtable = NULL;
    parent_vtable_n = NULL;
    vtable = NULL;
    struct_p = new_syntax_list();
    struct_b = new_syntax_list();
    //module_p = new_syntax_list();
    //module_b = new_syntax_list();
    builder = new_user_type_builder(name, env);
    builder->add(replace(raw_syntax (link_once), NULL, mark));
    //printf("USER TYPE BUILDER for %s = %p (%d)\n", syntax_to_string(name), builder);
    lenv = builder->env;
    vtable_b = new_syntax_list();
    vtable_i = new_syntax_list();
    exports  = new_syntax_list();
    fields = new_syntax_list();

    m = match_f(m, syntax _parent, replace_context(syntax _parent, context));
    m = match_f(m, syntax _constructor, replace_context(syntax _constructor, context));
    m = match_f(m, syntax _destructor, replace_context(syntax _destructor, context));
    m = match_f(m, syntax _assign, replace_context(syntax _assign, context));
    init_special_funs();
  }

  virtual void add_other_info() {
  }

  virtual void init_parent_info() {
    parent_m = parent->module;
    parent_vtable_n = replace(syntax parent_n::_VTable, m, mark);
    parent_vtable = user_type_info(parent_vtable_n, env);
    if (parent_vtable == parent) parent_vtable = NULL;
  }

  virtual void import_parent() {
    builder->add(replace(syntax {import parent_n;}, m, mark));

    //SyntaxEnum * itr = parent_m->symbols();
    //Syntax * syn;
    //while ((syn = itr->next())) {
    //  exports->append(syn);x
    //}
  }

  virtual void add_parent_info() {
    parse_class_var(partly_expand(replace(syntax {parent_n _parent;}, m, mark), FieldPos, lenv),
                    struct_p);
    register_field(m->var(syntax _parent), parent_s,
                   replace(raw_syntax (parent_n), m, mark));
    
    builder->add(`{macro cast_up(p) {&(*p).._parent;}});
    builder->add(`{macro cast_down(p) {reinterpret_cast<name *>(p);}});
    builder->add(`{make_subtype parent_n cast_up cast_down;});
  }

  Syntax * parse_body() {
    SyntaxEnum * itr = partly_expand_list(match_parts_f(NULL, raw_syntax ({...} @body), body)->varl(syntax body),
                                          FieldPos, lenv);
    Syntax * member;
    while ((member = itr->next)) {
      //printf("MEMBER: %s\n", syntax_to_string(member));
      match_parts(:shadow, `(what n @ type @_), member);
      if (!repl) {
        builder->add(member);
        continue;
      }

      const char * what = syntax_to_string(repl->var(syntax what));

      // ignore access control labels for now
      if (strcmp(what, "label")==0) continue;

      Syntax * err = NULL;
      if (strcmp(what, "var")==0) {
        parse_class_var(member, struct_b);
        register_field(repl->var(syntax n), NULL, repl->var(syntax type));
      } else if (strcmp(what, "alias")==0) {
        match_parts(:shadow, `(what n type value @_), member);
        //builder->add(replace(raw_syntax (macro n (:(this (reparse this this))) value), m0, mark));
        builder->add(`{macro n (:this ths = this) {({__shadow typeof(ths) fluid this = ths; value;});}});
        if (member->flag(syntax need_constructor))
          register_field(repl->var(syntax n), NULL, repl->var(syntax type));
      } else if (strcmp(what, "fun")==0) {
        err = parse_class_fun(member, NULL);      
      } else if (strcmp(what, "add_prop")==0) {
        builder->add(member);
      } else {
        builder->add(member);
      }
      if (err) return err;
      exports->append(repl->var(syntax n));
    }
    return NULL;
  }

  virtual void parse_special_forward() {
    // Parse special functions as forward declarations in order to build
    // necessary vptr and related info, for now only handle the _destructor

    Syntax * destrtr = NULL;

    if (destructor) {
      //destrtr = destructor;
      return;
    } else if (need_destructor) {
      destrtr = partly_expand(`{void * _destructor();}, FieldPos, lenv);
    }
    if (destrtr)
      parse_class_fun(destrtr, &destructor_collect);
  }

  virtual void create_vtable() {

    SyntaxList * flags = new_syntax_list();
    if (parent_vtable) // inherit parent vtable if one
      flags->append_flag(`(public $parent_vtable_n));
    if (m->var(syntax vtable_flag))
      flags->append_flag(m->var(syntax vtable_flag));
    
    // create new vtable class, 
    vtable = `(vtable_class _VTable @$flags ({...} $vtable_b));
    
    // create static vtable obj
    // create init function
    //   and add init code
    builder->add(vtable);
    SyntaxList * parent_init = new_syntax_list();
    if (parent_vtable)
      parent_init->append(`{parent_n::_vtable_init(_vt);});
    //builder->add(replace(raw_syntax (vtable_class _VTable), m, mark));
    builder->add(`{static void _vtable_init(_VTable * _vt) {$parent_init; $vtable_i;}});
    exports->append(``_vtable_init);
    
    builder->add(`{static __static_constructor void _init() {/*printf("INIT BASE VTABLE%c", 0x0A);*/ 
                                                             _vtable_init(&_vtable);}});
    
    //printf("Adding _vptr\n");
    if (parent_vtable) {
      builder->add(`{macro _vptr (:this ths = this) 
                       {(_VTable *)(implicit_ptr_cast<parent_n>(ths)->_vptr);}});
    } else {
      Syntax * v = `(var _vptr (.ptr _VTable));
      parse_class_var(v, struct_p); // Note: beginning of structure but end of module
      builder->add(`{macro _set_vptr (:this ths = this, other) 
                       {(*implicit_ptr_cast<name>(ths)).._vptr = other;}});
    }
    exports->append(``_vptr);
    Syntax * assign = `{this->_set_vptr(&_vtable);}; 
    // ^^ FIXME: Once shared marks are working, this "this->" part can be removed.
    need_constructor = true;
    add_constructor_code(assign);
    need_copy_constructor = true;
    copy_constructor_code->append(assign);
    
    exports->append(``_VTable);
    exports->append(``_VTable`outer);
    
    add_static_vtable();
  }

  virtual void add_static_vtable() {
    builder->add(`{static _VTable _vtable;});
  }

  SyntaxList * get_constructor_code() {
    SyntaxList * code = new_syntax_list();
    for (ConstructorCode * cur = constructor_code; cur; cur = cur->next)
      if (cur->code) code->append(cur->code);
    return code;
  }

  .class InitCode {
    struct Data {
      Syntax * field;
      Syntax * code;
    } * data;
    unsigned size;
    void init(Syntax * syn00) {
      if (syn00) {
        size = syn00->num_args();
        data = zl_malloc(sizeof(struct Data) * size);
        for (unsigned i = 0; i != size; ++i) {
          data[i].field = syn00->arg(i)->part(0);
          data[i].code = syn00->arg(i)->part(1);
        }
      } else {
        data = NULL;
        size = 0;
      }
    }
    Syntax * find(Syntax * syn) {
      for (unsigned i = 0; i != size; ++i) {
        if (data[i].field->eq(syn))
          return data[i].code;
      }
      return NULL;
    }
  };

  Syntax * prep_constructor(Syntax * constructor) {
    match_parts(:shadow, `(w n parms ret @ body @_), constructor);
    InitCode init_code;
    init_code.init(constructor->flag(syntax init));
    SyntaxList * code = new_syntax_list();
    for (ConstructorCode * cur = constructor_code; cur; cur = cur->next) {
      Syntax * c = cur->name ? init_code.find(cur->name) : NULL;
      if (c) {
        code->append(`(construct (kill_const (-> this $(cur->field))) $(cur->type) . $c)); 
      } else {
        if (cur->code) code->append(cur->code);
      }
    }
    if (repl->var(syntax body)) {
      constructor = `(w n parms ret (block $code body));
    }
    return constructor;
  }

  virtual void create_special() {
    destructor_code->reverse();

    unsigned num_constructors = constructors->size();

    SyntaxEnum * itr = constructors->elements();
    Syntax * constructor;
    while ((constructor = itr->next())) {
      parse_class_fun(prep_constructor(constructor), NULL);
    }
    constructors = NULL;

    if (builder->have_copy_constructor())
      num_constructors--;

    if (num_constructors == 0 && need_constructor) {
      constructor = 
        partly_expand(
          `{void _constructor() {$(get_constructor_code());}}, 
          FieldPos, lenv);
      parse_class_fun(constructor, NULL);
    }

    if (!builder->have_copy_constructor() && need_copy_constructor) {
      constructor = 
        partly_expand(
          `{void _constructor(const name & other) {$copy_constructor_code;}},
          FieldPos, lenv);
      parse_class_fun(constructor, NULL);
    }

    if (!builder->have_assign() && need_assign && builder->can_have_assign()) {
      Syntax * assign = 
        partly_expand(
          `{void _assign(const name & other) {$assign_code;}}, 
          FieldPos, lenv);
      // don't allow virtual assign for now
      parse_class_fun(assign, NULL);
    }

    if (destructor) {
      match_parts(:shadow, `(w n parms ret @ body @rest), destructor);
      if (repl->var(syntax body))
        destructor =
          `(w n parms (.ptr (void)) (block body $destructor_code (return this)) @rest);
    } else if (need_destructor) {
      destructor =
        partly_expand(
          `{void * _destructor() {$destructor_code; return this;}}, 
          FieldPos, lenv);
    }
    if (destructor)
      finish_class_fun(destructor, &destructor_collect, true);
  }

  virtual void parse_class_var(Syntax * p, SyntaxList * struct_b) {
    //printf("parse_class_var: %s\n", syntax_to_string(p));
    match(:shadow, `(n t @rest), p);
    bool is_static = p->flag(syntax static);
    
    // FIXME: handle flags
    if (is_static) {
      builder->add(`(var (` (mid n) internal) (mid t) (mid @rest)));
      builder->add(`{macro n () :id {n`internal;}});
    } else {
      struct_b->append(`((mid t) (mid n)));
      // FIXME: (name *)(this) may cast away const
      builder->add(`{macro n (:this ths = this) :id {(*(name *)(ths))..n;}});
    }
  }

  virtual Syntax * parse_class_fun(Syntax * p, struct Collect * collect) {
    //printf("parse_class_fun: %s\n", syntax_to_string(p));
    match(:shadow, `(n parms0 ret @ body :static @rest), p);
    Match * & m = repl;
    m = match_f(m, raw_syntax(@parms), m->var(syntax parms0));
    //printf("STATIC? %d   VIRTUAL? %d\n", is_static, is_virtual);
    //assert(!(is_static && is_virtual)); // FIXME Error message

    Syntax * class_name = expand_id(repl->var(syntax name), lenv);
    Syntax * name = expand_id(repl->var(syntax n), lenv);
    //printf("<><>%s %s\n", syntax_to_string(class_name), syntax_to_string(name));
    if (name->eq(class_name)) {
      constructors->append(`(fun _constructor (. @parms) ret body @rest));
      return NULL;
    } else if (name->eq(raw_syntax (operator =))) {
      //printf("ASSIGN\n");
      // just change the name, nothing special needs to be done
      m = match_f(m, syntax n, ``_assign);
    } else if (!name->simple() && name->part(0)->eq(syntax ~) 
               && expand_id(name->part(1), lenv)->eq(class_name)) {
      //printf("DESTRUCTOR\n");
      // change the return type to "void *", the body will get fixed up later
      destructor = `(fun _destructor (. @parms) (.ptr void) body @rest);
      return parse_class_fun(destructor, &destructor_collect);
    }

    // FIXME: handle flags
    bool is_static = p->flag(syntax static);
    bool is_virtual = p->flag(syntax virtual);
    bool is_inline = p->flag(syntax inline); // FIXME: do something with this

    m = create_vtable_entry_name(m);
    bool virtual_override = determine_virtual_override(m);
    if (!is_virtual && virtual_override) is_virtual = true;
    Syntax * ptr_self = determine_ptr_self(p);
    Syntax * this_type = is_static ? NULL : determine_this_type(p, m, ptr_self, virtual_override);
  
    SyntaxList * macro_parms = new_syntax_list();
    SyntaxList * typed_parms = new_syntax_list();
    SyntaxList * call_parms  = new_syntax_list();
  
    //if (!is_static) 
    //  call_parms->append(replace(syntax ((name  *)ths), m, mark));
    SyntaxEnum * parms_enum = m->varl(syntax parms);
    unsigned i = 0;
    Syntax * parm;
    bool now_optional = false;
    while ((parm = parms_enum->next())) {
      Match * m0 = match_parts_f(m, raw_syntax(type @ name :(default default)), parm);
      //printf("AND THE PARM IS %s w/ type %s\n", syntax_to_string(parm), syntax_to_string(m0->var(syntax type)));
      //printf("AND THE PARM IS %s\n", syntax_to_string(parm));
      Syntax * arg = m0 ? m0->var(syntax name) : NULL;
      if (!arg) {
        char sbuf[8];
        snprintf(sbuf, 8, "arg%d", i);
        arg = replace(string_to_syntax(sbuf), 0, mark);
      }
      if (m0) {
        if (m0->var(syntax default)) {
          //printf("W/DEFAULT MAN\n");
          macro_parms->append(replace(raw_syntax(reparse name default), m0, mark));
          if (!now_optional)
            typed_parms->append(``@);
          now_optional = true;
        } else {
          macro_parms->append(`(reparse $arg));
        }
        typed_parms->append(parm);
        call_parms->append(make_mid(arg));
      } else if (parm->eq(syntax ...)) {
        macro_parms->append(`(reparse @varargs));
        typed_parms->append(parm);
        call_parms->append(``varargs);
      }
      ++i;
    }
    if (!is_static)
      macro_parms->append_flag(`(this (reparse ths this)));
    SyntaxList * new_parms = mk_method_parms(this_type, m->varl(syntax parms));
    
    bool w_body = !collect && m->var(syntax body);
    builder->add(mk_method_defn(m, ptr_self, is_static, true, virtual_override, 
                                this_type, m->varl(syntax parms), w_body));
    if (collect) {
      collect->virtual_override = virtual_override;
      collect->this_type = this_type;
    }
    
    Syntax * call_nv = mk_call(``n`internal,
                               !is_static ? replace(syntax ths, m, mark) : NULL, 
                               call_parms);
    //printf("TP: %s\n", syntax_to_string(typed_parms));
    //builder->add(replace(syntax {macro n`non_virtual ($1) :typed_parms($2) {$3;}},
    //                     match_local(m, macro_parms, typed_parms, call_nv, 0), mark));
    builder->add(`(macro (` n non_virtual) (@$macro_parms) :(typed-parms (. @$typed_parms)) $call_nv));
    
    if (is_virtual) {
      //m = match_f(m, syntax fpn, m->var(syntax n));
      if (virtual_override) {
        // don't define a new method but bring the parent method into
        // the same scope
        builder->add(`(bring_to_this_scope (:: parent_n n)));
      } else {
        Syntax * call_v = mk_call(`(-> (-> this _vptr) fpn), ``this, call_parms);
        builder->add(`(macro n (@$macro_parms) :(typed-parms (. @$typed_parms)) 
                         (eblock (:shadow var (fluid this) $ptr_self ths) $call_v)));
        Syntax * pfun = `(.ptr (.fun (. $new_parms) ret));
        vtable_b->append(`(var fpn $pfun));
        vtable_b->append(`(add_prop fpn this_type $this_type)); 
      }
      if (p->flag(syntax pure_virtual)) {
        vtable_i->append(`(assign (-> _vt fpn) 0));
      } else {
        vtable_i->append(`(assign (-> _vt fpn) (` n internal)));
        //vtable_i->append(replace(syntax {printf("%p%c", _vt->fpn, 0xA);}, m, mark));
      }
    } else {
      //printf("OK HERE WE GO: %s %s\n", 
      //       syntax_to_string(macro_parms),
      //       syntax_to_string(typed_parms));
      builder->add(`(macro n (@$macro_parms) :(typed-parms (. @$typed_parms)) $call_nv));
    }
    builder->add(`(add_prop (fun n (. @parms)) is_method true));
    if (is_static)
      builder->add(`(add_prop (fun n (. @parms)) is_static true));

    //printf("DONE %s\n", syntax_to_string(m->var(syntax n)));
    return NULL;
  }

  Match * create_vtable_entry_name(Match * m) {
    // create unique name vtable entry, needs to different so that we
    // don't confuse vtable entries for special functions such as
    // _destructor with the real function
    char sbuf[1024];
    snprintf(sbuf, 1024, "%s%s$fp", 
             mangle_name(m->var(syntax n), env),
             mangle_fun_parms(m->var(syntax parms0), lenv));
    return match_f(m, syntax fpn,
                 replace_context(string_to_syntax(sbuf), get_context(m->var(syntax n))));
  }

  bool determine_virtual_override(Match * m) {
    return parent_vtable && parent_vtable->module->have_symbol(m->var(syntax fpn));
  }

  Syntax * determine_ptr_self(Syntax * p) {
    if (p && p->flag(syntax const_method))
      return replace(raw_syntax(.ptr (name :const)), m, mark);
    else
      return replace(raw_syntax(.ptr (name)), m, mark);
  }

  Syntax * determine_this_type(Syntax * p, Match * m, Syntax * ptr_self, bool virtual_override) {
    if (virtual_override) {
      return get_symbol_prop(replace(raw_syntax(:: (:: parent_n _VTable) fpn), m, mark),
                             syntax this_type,
                             env);
      //replace(raw_syntax(.tprop (.type (.tprop (-> (reinterpret_cast 
      //                                                (.ptr ((:: parent_n _VTable))) 0) fpn) 
      //                                    inner)) (parm 0)), m, mark);
    } else {
      return ptr_self;
    }
  }

  virtual Syntax * mk_call(Syntax * fun, Syntax * ths, SyntaxList * parms) {
    if (ths)
      return `(call $fun (. $ths $parms));
    else
      return `(call $fun (. $parms));
  }

  virtual SyntaxList * mk_method_parms(Syntax * this_type, SyntaxEnum * parms) {
    SyntaxList * new_parms = new_syntax_list();
    if (this_type) 
      new_parms->append(`($this_type (fluid this)));
    new_parms->append_all(parms);
    return new_parms;
  }

  // this is used to finalize the a class fun code, only used for the
  // destructor for now
  virtual Syntax * finish_class_fun(Syntax * p, Collect * collect, bool inline_) {
    //printf("finish_class_fun: %s\n", syntax_to_string(p));
    __shadow Match * m = match_f(m, raw_syntax (n parms ret @ body @rest), p);
    m = match_f(m, raw_syntax (@parms), m->var(syntax parms));
    
    // FIXME: handle flags

    builder->add(mk_method_defn(m, determine_ptr_self(p), false, inline_, collect->virtual_override, 
                                collect->this_type, m->varl(syntax parms), m->var(syntax body)));
    
    return NULL;
  }

  virtual Syntax * mk_method_defn(Match * fluid repl, Syntax * ptr_self,
                                  bool static_, bool inline_, bool virtual_override, 
                                  Syntax * this_type, SyntaxEnum * parms,
                                  bool w_body) {
    //printf("mk_method_defn: %s %s\n", syntax_to_string(name), syntax_to_string(m->var(syntax n)));
    SyntaxList * new_parms = mk_method_parms(this_type, parms);
    SyntaxList * body = new_syntax_list();
    if (w_body) {
      Syntax * body0;
      if (virtual_override) {
        body0 =
          `(block (var :__shadow (fluid this) $ptr_self (cast (.ptr (:const name)) this)) body);
      } else {
        body0 = repl->var(syntax body);
      }
      body->append(mk_method_body(this_type, body0));
    }
    SyntaxList * flags = new_syntax_list();
    if (inline_)  flags->append_flag(``inline);
    if (!static_) flags->append_flag(``prop_w_this);
    return `(@$flags fun (` n internal) (. $new_parms) ret @$body);
  }

  virtual Syntax * mk_method_body(Syntax * this_type, Syntax * body) {
    return body;
  }

  virtual void init_special_funs() {
    constructors = new_syntax_list();

    need_constructor = false;
    constructor_code = NULL;
    constructor_code_ip = &constructor_code;
    
    need_copy_constructor = false;
    copy_constructor_code = new_syntax_list();
    
    need_assign = false;
    assign_code = new_syntax_list();
    //assign = NULL;
    
    need_destructor = false;
    destructor_code = new_syntax_list();
    destructor = NULL;
    destructor_collect.virtual_override = false;
    destructor_collect.this_type = NULL;
  }
  
  // FIXME: Rename
  virtual void register_field(Syntax * name, Syntax * user_name, Syntax * type) {
    if (!user_name) user_name = name;
    const UserType * ut = user_type_info(type, lenv);

    fields->append(name);
    
    if (ut && ut->have_default_constructor()) {
      need_constructor = true;
      add_constructor_field(name, user_name, type, 
        `(member (kill_const $name) (call _constructor (.))));
    } else {
      add_constructor_field(name, user_name, type, NULL);
    }
    
    if (ut && ut->have_copy_constructor())
      need_copy_constructor = true;
    copy_constructor_code->append(
      `(init-assign (kill_const $name) (member other $name)));
    
    if (ut && ut->have_assign())
      need_assign = true;
    assign_code->append(`(assign $name (member other $name)));
    
    if (ut && ut->have_destructor()) {
      need_destructor = true;
      destructor_code->append(
        `(member (kill_const $name) (call (` _destructor non_virtual) (.))));
    }
  }

  virtual Syntax * parse_class_fun_defn(Syntax * p) {
    //printf("parse_class_fun: %s\n", syntax_to_string(p));
    match(:shadow, `(n parms0 ret @ body :static @rest), p);
    match(:shadow, `(@parms), repl->var(syntax parms0));

    Syntax * class_name = repl->var(syntax name);
    Syntax * name = repl->var(syntax n);

    //printf("ABC>%s\n", syntax_to_string(name));
    if (name->eq(class_name)) { // constructor
      Syntax * c = `(fun _constructor (. @parms) ret body @rest);
      c = prep_constructor(c);
      return parse_class_fun_defn(c);
    } else if (name->eq(raw_syntax (operator =))) { // assign
      // just change the name, nothing special needs to be done
      //printf("OK GOT ASSIGN\n");
      repl = match_f(repl, syntax n, ``_assign);
    } else if (!name->simple() && name->part(0)->eq(syntax ~) && name->part(1)->eq(class_name)) { // destructor
      repl = match_f(repl, syntax n, ``_destructor);
      repl = match_f(repl, syntax ret, `(.ptr void));
      repl = match_f(repl, syntax body, `(block body $destructor_code (return this)));
      return mk_method_defn(repl, determine_ptr_self(NULL), false, false, destructor_collect.virtual_override, 
                            destructor_collect.this_type, repl->varl(syntax parms), true);
    }

    // FIXME: handle flags
    bool is_static = p->flag(syntax static);
    bool is_inline = p->flag(syntax inline);

    if (get_symbol_prop(`(fun (:: name n) parms0), syntax is_static, env))
      is_static = true;
    
    repl = create_vtable_entry_name(repl);
    bool virtual_override = determine_virtual_override(repl);
    Syntax * ptr_self = determine_ptr_self(p);
    Syntax * this_type = is_static ? NULL : determine_this_type(p, repl, ptr_self, virtual_override);

    SyntaxList * new_parms = mk_method_parms(this_type, repl->varl(syntax parms));
    
    return mk_method_defn(repl, ptr_self, false, is_inline, virtual_override, 
                          this_type, repl->varl(syntax parms), true);
  }
};

extern "C"
Syntax * default_parse_class(Syntax * p, Environ * env) {
  ParseClass * pc = new ParseClass;
  return pc->parse(p, env, NULL);
}

Syntax * parse_class(Syntax * p, Environ * env) {
  AbiInfo * inf = environ_get_abi_info(env);
  if (inf->parse_class) {
    Syntax * (*fun)(Syntax *, Environ *) = inf->parse_class;
    return fun(p, env);
  } else {
    return default_parse_class(p, env);
  }
}

Syntax * parse_memberdecl(Syntax * p, Environ * env) {
  Match * m = match_f(NULL, raw_syntax (name defn), p);
  Syntax * defn = m->var(syntax defn);
  defn = partly_expand(defn, OtherPos, env);
  Syntax * ptr_syn = get_symbol_prop(m->var(syntax name), syntax ptr, env);
  void * ptr = ptr_syn->extract_ptr();
  ParseClass * pc = (ParseClass *)ptr;
  if (defn->part(0)->eq(syntax fun)) {
    Syntax * res = pc->parse_class_fun_defn(m->var(syntax defn));
    return res;
  } else if (defn->part(0)->eq(syntax var)) {
    m = match_f(m, raw_syntax(n @rest), defn);
    return replace(raw_syntax(var (` n internal) @rest), m, pc->mark_);
  } else {
    return defn;
  }
}

