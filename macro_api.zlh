//
// Rest of Macro ABI
//

user_type Symbol;
user_type Type;
user_type FunType;
user_type UserType;
user_type Module;

__ct_callback UserType * user_type_info(Syntax *, const Environ *);
__ct_callback Module * user_type_module(const UserType *);
__ct_callback Module * module_info(Syntax *, const Environ *);
__ct_callback SyntaxEnum * module_symbols(const Module *);
__ct_callback bool module_have_symbol(const Module *, const Syntax *);
__ct_callback bool user_type_have_default_constructor(const UserType *);
__ct_callback bool user_type_have_copy_constructor(const UserType *);
__ct_callback bool user_type_have_assign(const UserType *);
__ct_callback bool user_type_can_have_assign(const UserType *);
__ct_callback bool user_type_have_destructor(const UserType *);

__ct_callback unsigned symbol_num(const Symbol *);
__ct_callback Symbol * symbol_where(const Symbol *);
__ct_callback bool symbol_asm_hidden(const Symbol *);
__ct_callback const char * symbol_name(const Symbol *);
__ct_callback const char * symbol_uniq_name(const Symbol *);
__ct_callback Type * symbol_to_type(const Symbol *);
__ct_callback FunType * symbol_to_fun_type(const Symbol *);
__ct_callback Syntax * symbol_get_prop(const Symbol *, UnmarkedSyntax * prop);
//__ct_callback Type * symbol_to_module(const Symbol *);
//__ct_callback Type * symbol_to_variable(const Symbol *);
struct Symbol;
user_type Symbol {
  associate_type struct Symbol;
  macro num(:this this) {symbol_num(this);}
  macro where(:this this) {symbol_where(this);}
  macro asm_hidden(:this this) {symbol_asm_hidden(this);}
  macro name(:this this) {symbol_name(this);}
  macro uniq_name(:this this) {symbol_uniq_name(this);}
  macro to_type(:this this) {symbol_to_type(this);}
  macro to_fun_type(:this this) {symbol_to_fun_type(this);}
  macro get_prop(:this this, prop) {symbol_get_prop(this, prop);}
}

static const int TypeQualifier_CONST    = 1;
static const int TypeQualifier_VOLATILE = 2;
static const int TypeQualifier_RESTRICT = 4;

__ct_callback Symbol * type_to_symbol(const Type *);

__ct_callback Type * type_root(const Type *);
__ct_callback Type * type_subtype(const Type *);
__ct_callback int type_qualifiers(const Type *);
__ct_callback const char * type_tag(const Type *);

__ct_callback const bool type_is_scalar(const Type *);
__ct_callback const bool type_is_qualified(const Type *);
__ct_callback const bool type_is_pointer(const Type *);
__ct_callback const bool type_is_reference(const Type *);
__ct_callback const bool type_is_array(const Type *);
__ct_callback const bool type_is_fun(const Type *);
__ct_callback const bool type_is_user(const Type *);

struct Type;
user_type Type {
  associate_type struct Type;
  import Symbol;
  macro _up_cast (x) {type_to_symbol(x);}
  macro _down_cast (x) {abort();}
  make_subtype Symbol _up_cast _down_cast;

  associate_type struct Type;
  macro root(:this this) {type_root(this);}
  macro subtype(:this this) {type_subtype(this);}
  macro qualifiers(:this this) {type_qualifiers(this);}
  macro tag(:this this) {type_tag(this);}
  macro is_scalar(:this this) {type_is_scalar(this);}
  macro is_qualified(:this this) {type_is_qualified(this);}
  macro is_pointer(:this this) {type_is_pointer(this);}
  macro is_reference(:this this) {type_is_reference(this);}
  macro is_array(:this this) {type_is_array(this);}
  macro is_fun(:this this) {type_is_fun(this);}
  macro is_user(:this this) {type_is_user(this);}
}


__ct_callback Type * fun_type_ret_type(const FunType *);
__ct_callback unsigned fun_type_num_parms(const FunType *);
__ct_callback Type * fun_type_parm_type(const FunType *, unsigned num);
struct FunType;
user_type FunType {
  associate_type struct FunType;
  import Type;
  macro _up_cast (x) {fun_type_to_type(x);}
  macro _down_cast (x) {abort();}
  make_subtype Type _up_cast _down_cast;

  macro ret_type(:this this) {fun_type_ret_type(this);}
  macro num_parms(:this this) {fun_type_num_parms(this);}
  macro parm_type(:this this, num) {fun_type_parm_type(this, num);}
}

struct UserType;
user_type UserType {
  associate_type struct UserType;
  export module;
  macro module(:this this) {user_type_module(this);}
  macro have_default_constructor(:this this) {user_type_have_default_constructor(this);}
  macro have_copy_constructor(:this this) {user_type_have_copy_constructor(this);}
  macro have_assign(:this this) {user_type_have_assign(this);}
  macro can_have_assign(:this this) {user_type_can_have_assign(this);}
  macro have_destructor(:this this) {user_type_have_destructor(this);}
}

struct Module;
user_type Module {
  associate_type struct Module; 
  export symbols, have_symbol;
  macro symbols(:this this) {module_symbols(this);}
  macro have_symbol(sym, :this this) {module_have_symbol(this, sym);}
}

user_type ModuleBuilder;
user_type UserTypeBuilder;
__ct_callback ModuleBuilder * new_module_builder(Syntax * name, Environ * env);
__ct_callback void module_builder_add(ModuleBuilder *, Syntax *);
__ct_callback Syntax * module_builder_to_syntax(ModuleBuilder *);
__ct_callback UserTypeBuilder * new_user_type_builder(Syntax * name, Environ * env);

struct ModuleBuilder {
  Module * module;
  UserType * user_type;
  Environ * env;
};
user_type ModuleBuilder {
  associate_type struct ModuleBuilder;
  macro module(:this this) {(*this)..module;}
  macro user_type(:this this) {(*this)..user_type;}
  macro env(:this this) {(*this)..env;}
  macro add(syn, :this this) {module_builder_add(this, syn);}
  macro to_syntax(:this this) {module_builder_to_syntax(this);}
}

user_type UserTypeBuilder {
  associate_type struct ModuleBuilder;
  import ModuleBuilder;
  macro _up_cast (x) {reinterpret_cast<ModuleBuilder *>(x);}
  macro _down_cast (x) {reinterpret_cast<UserTypeBuilder *>(x);}
  make_subtype ModuleBuilder _up_cast _down_cast;
  macro have_default_constructor(:this this) {this->user_type->have_default_constructor();}
  macro have_copy_constructor(:this this) {this->user_type->have_copy_constructor();}
  macro have_assign(:this this) {this->user_type->have_assign();}
  macro can_have_assign(:this this) {this->user_type->can_have_assign();}
  macro have_destructor(:this this) {this->user_type->have_destructor();}
}


__ct_callback const char * mangle_name(Syntax *, Environ *);
__ct_callback const char * mangle_fun_parms(Syntax *, const Environ *);

__ct_callback void gdb_breakpoint();

__ct_callback Syntax * stringify(Syntax * p);

