Syntax * uint_to_syntax(unsigned i) {
  char buf[16];
  snprintf(buf, 16, "%u", i);
  UnmarkedSyntax * s = string_to_syntax(buf);
  return (Syntax *)s;
}

Syntax * parse_quasiquote(Syntax * qq, Environ * env) {
  Mark * outer_mark = new_mark(prelude_envss);
  Match * m = match_f(0, raw_syntax (pattern aqs), qq);
  //printf("XXX: ");
  //dump_syntax(qq);
  Syntax * aqs = m->var(syntax aqs);
  if (aqs->num_args() == 0) {
    return replace(syntax {replace(syntax_d pattern, repl, mark);}, m, outer_mark);
  } else {
    UnmarkedSyntax * res = syntax {
      replace_w_antiquotes(syntax_d $1, repl, mark, $2, $3);
    };
    return replace(res, match_local(m, qq, uint_to_syntax(aqs->num_args()), aqs, NULL), outer_mark);
  }
}

Syntax * parse_match(Syntax * in, Environ * env) {
  Mark * mark = new_mark(prelude_envss);
  Match * m = match_f(0, syntax [qq, with, :match_f match_f = match_f`internal], in, mark);
  Syntax * qq = m->var(syntax qq);
  Environ * lenv = temp_environ(env);
  pre_parse(replace(raw_syntax(kill_binding (` quasiquote syntax)),
                    NULL, mark), lenv);
  qq = partly_expand(qq, ExpPos, lenv);
  // FIXME: make sure with have a quasiquote
  //dump_syntax(qq);
  Syntax * pattern = qq->arg(0);
  //dump_syntax(pattern);
  //dump_syntax(m->var(syntax with));
  Syntax * aqs = qq->arg(1);
  SyntaxList * assign = new_syntax_list();
  unsigned idx = 0;
  bool bind = in->flag(syntax bind) != NULL;
  bool shadow = in->flag(syntax shadow) != NULL;
  UnmarkedSyntax * assign_pattern;
  if (shadow)
    m = match_f(m, syntax new_repl, replace_context(syntax repl, get_context(in)));
  if (aqs->num_args() == 0) {
    // don't use quasiquote if not needed
    qq = pattern;
  } else {
    if (bind)
      assign_pattern = syntax {Syntax * $1 = match_aq_var(new_repl, $2);};
    else
      assign_pattern = syntax {$1 = match_aq_var(new_repl, $2);};
    SyntaxEnum * iter = aqs->args();
    Syntax * aq;
    while ((aq = iter->next())) {
      assign->append(replace(assign_pattern,
                             match_local(m, aq, uint_to_syntax(idx), NULL),
                             mark));
      idx++;
    }
  }
  UnmarkedSyntax * res;
  if (!bind && !shadow) {
    res = syntax {({
          Match * new_repl = match_f(repl, syntax_d $1, with, NULL);
          $2;
          new_repl;
        });};
  } else if (shadow) {
    res = syntax {
      __shadow Match * fluid new_repl = match_f(repl, syntax_d $1, with, NULL);
      $2;
    };
  } else {
     res = syntax {
      Match * new_repl = match_f(repl, syntax_d $1, with, NULL);
      $2;
    };
  }
  return replace(res, match_local(m, qq, assign, NULL), mark);
}

