
TOP = <top> SPACING {STMT}+;

SLIST = <@> SPACING {STMT}+;

#
# C Statement
#

STMT : "statement" = 
      <<mid PARM>> {MID} ";"
    / <lcstmt> {CASE_LABEL} ":" {STMT}
    / <lstmt> {ID} ":" {STMT}
    / <if>    "if" "(" {EXP} ")" {STMT} ("else" {STMT})?
    / <switch> "switch" "(" {EXP} ")" {STMT}
    / <while> "while" "(" {EXP} ")" {STMT}
    / <do>    "do" {STMT} "while" "(" {EXP} ")" ";"
    / <for>   "for" "(" {<stmt> {TOKEN}+ / <noop>} ";" {EXP/<n 1>} ";" {<eblock> {EXP}/<noop>} ")" {STMT}
    / <break>    "break" ";"
    / <continue> "continue" ";"
    / <return>   "return" {EXP} ";"
    / <local_label> "__label__" {ID} ";"
    / <goto>     "goto" {ID} ";"
    / {BLOCK}
    / {MACRO} / {MAKE_MACRO}
    / {MODULE} / {IMPORT}
    / <include_file> "include_file" {STRING} ";"
    / <import_file> "import_file" {STRING} ";"
    / <fluid_binding> "fluid_binding" {ID} ";"
    / <fluid_label>   "fluid_label"   {ID} ";"
    / <fluid_syntax>  "fluid_syntax"  {ID} ";"
    / <make_inner_ns> "make_inner_ns" {ID} ";"
    / <make_user_type> "make_user_type" {ID} {TOKEN}? ";" # FIXME: TOKEN not right...
    / <declare_user_type> "declare_user_type" {ID} ";"
    / <make_subtype> "make_subtype" {ID} {ID} {ID}? ";"
    / <finalize_user_type> "finalize_user_type" {TOKEN} ";"
    / <export> "export" {ID} ("," {ID})* ";"
    / <add_prop> "add_prop" {RAW_ID} {SYNTAX_P} ";"
    / <raw> "__raw" {PARAN} ";"
    / <noop>   ";"
    / <stmt>   ({TOKEN_}+ {PARAN} {BRACE} / {TOKEN}+ ";")
   ;

CASE_LABEL =
      <case> "case" {CASE_EXP}
    / <case> "default";

CASE_EXP = <exp> (!":" {TOKEN})+;

MACRO =
  <macro> "macro" {ID} "(" {MATCH_LIST} ")" (:<free> ":" "(" {ID_LIST} ")" /) {BRACE}
  / <smacro> "smacro" {ID} "(" {MATCH_LIST} ")" (:<free> ":" "(" {ID_LIST} ")" /) {BRACE} ;

MAKE_MACRO  =
    <%> ({"make_macro"/"make_syntax_macro"}) {ID} {ID}? {:<> ':'{"w_snapshot"}}? ";";

MODULE = 
    <%> {"module"/"user_type"} {ID} ({<{...}> "{" {STMT}* "}" } / ";");

IMPORT = 
    <import> "import" {ID} ";";

ID_LIST =
  <> ({ID} ",")* {ID}?;

MATCH_LIST =
  <> ({MATCH} ",")* {MATCH}?;

MATCH = <<mid>> {MID} / :<> ':'{ID} {<reparse> {ID} ("=" {SPLIT_PARM})?} / <reparse> {ID} ("=" {SPLIT_PARM})? ;

#
# C Token
#

TOKEN_ : "token" =  <<mid PARM>> {MID} !("`" / "::") /  
         {STRUCT_UNION} / {ENUM} / {TYPEOF} / {SYNTAX}
         / {RAW} / {TEMPLATE_CALL}
         / {BRACK} / {CONST}
         / {ID} / {SYM};

TOKEN = {TOKEN_} / {PARAN} / {BRACE};

# FIXME: Add support for hex-floats
CONST = <f> {([0-9]*'.'[0-9]+/[0-9]+'.')([eE][+-]?[0-9]+)?} {FLOATING_SUFFIX} SPACING
        / <n> {'0'[xX][0-9a-fA-F]+} {INT_SUFFIX} SPACING
        / <n> {[1-9][0-9]*} {INT_SUFFIX} SPACING
        / <n> {'0'[0-7]*} {INT_SUFFIX} SPACING
        / <s> {STRING} (<char>)
        / <s> 'L'{STRING} (<wchar_t>)
        / <c> {CHAR} (<char>)
        / <c> 'L'{CHAR} (<wchar_t>);

INT_SUFFIX = <"unsigned long long"> ([uU][lL][lL]/[lL][lL][uU])
           / <"unsigned long"> ([uU][lL]/[lL][uU])
           / <"long long"> [lL][lL] 
           / <unsigned> [uU] 
           / <long> [lL] 
           / <int>;

FLOATING_SUFFIX = <f> [fF] / <"long double"> [lL] / <double>;

STRUCT_UNION = <%> {"struct"/"union"/"class"/".class"} 
                   {ID/}
                   (:<public> ":" "public" {ID})?
                   (:<fix_size> ":" "fix_size" "(" {EXP} ")" )? # used for test67
                   (:<fix_vtable_size> ":" "fix_vtable_size" "(" {EXP} ")" )? # used for test101
                   (:<abi_ver> ":" "abi_ver" "(" {EXP} ")" )? 
                   {<{...}> "{" {STMT}* "}" }?;

ENUM = <enum> "enum" {ID/} 
              {<{,}> "{" ({ENUM_MEMBER} ",")* ({ENUM_MEMBER} ","?)? "}" }?;
ENUM_MEMBER = <> {ID} ("=" {ENUM_EXP})?;
ENUM_EXP = <exp> (!"," {TOKEN})+;

TYPEOF = <.typeof> "typeof" "(" {EXP} ")";

SYNTAX = 
    <syntax> "syntax" {SYNTAX_P}?
  / <raw_syntax> "raw_syntax" {PARAN};

SYNTAX_P =
  <<mid>> {MID} / {ID} / {SYM} / {BRACE} / {PARAN}; # / {BRACK};
#  <<mid>> {MID} / {ID} / {BRACE} / <parm> "(" {RAW_TOKEN*} ")"; # / {BRACK};

SYNTAX_STR =
  ({SYNTAX_P} / <<reparse parm>> {RAW_TOKEN+}) EOF;

#
# Misc
#

EXP = <exp> {TOKEN}+;

INIT = <<mid>> {MID} / <init> {TOKEN}+;

BLOCK = <block> "{" {STMT}* "}";

EBLOCK = <eblock> "(" "{" {STMT}* "}" ")";

#
# Raw Tokens
#

BRACE = <<reparse {}>> "{" {RAW_TOKEN*} "}";
PARAN = <<reparse ()>> "(" {RAW_TOKEN*} ")";
BRACK = <<reparse []>> "[" {RAW_TOKEN*} "]";
ANGLE = <<reparse \<\>>> '<' {(ANGLE / !'>' RAW_TOKEN)*} '>';

RAW_TOKEN = STRING / CHAR / BRACE / PARAN / BRACK / COMMENT / [^\)\]\}];

#
# Lex Like Tokens
#

RAW_ID : "identifier" =
  <<mid>> {MID} / {[@$\a_][$\a_\d]*} SPACING;

ID_W_NS : "identifer" =
  <::> {RAW_ID} "::" {ID_W_NS} / {RAW_ID};

ID_W_INNER =
  <`> {ID_W_NS} "`" {ID_W_NS} / {ID_W_NS};

ID =
  <fluid> "fluid" {ID} / {ID_W_INNER};

RAW = 
  <raw> "__raw" {PARAN};

TEMPLATE_CALL =
  <%> {"implicit_cast"/"reinterpret_cast"} {ANGLE} {PARAN};

MID : "macro identifier" = 
     {[@$\a_][\a_\d]*} SPACING;

NUM : "number" = 
    {[\d]+('.'[\d]+)?} SPACING;

STRING = '"' {('\\'_/[^"])+} '"' SPACING;

CHAR   = '\'' {('\\'_/[^'])+} '\'' SPACING;

#SYM : "symbol" = 
#    {[\y+^,;`]+/','} SPACING;

SYM : "symbol" =
   {'...' / '>>=' / '<<=' / '..' / '>>' / '<<' / '&&' / '||' / 
   '<=' / '>=' / '==' / '!=' / '++' / '--' / '->' /
   '+=' / '-=' / '*=' / '/=' / '%=' / '/=' / '&=' / '^=' / '|=' /
   '+'  / '-'  / '*'  / '/'  / '%'  / '/'  / '&'  / '^'  / '|' /
   '=' / '<' / '>' / '?' / ':' / ',' / '.' / '!' / '~'} SPACING;

SPACING : "spacing" =
   [\s]* COMMENT?
   ;

COMMENT = 
    '//' [^\n]* [\n] SPACING
  / '#' [^\n]* [\n] SPACING
  / '/*' _* . '*/' SPACING;

#
# Special tokens
#

"[\a_.][\a\d_]*" = {_self} ![\a\d_] SPACING;
"[;,]" = {_self} SPACING;
"[\y]+" : "operator" = {_self} ![\y] SPACING;
"_" = {_self} SPACING;

#
# Productions used by macro expander
#

PARAN_EXP = {EBLOCK} / "(" {EXP} ")";

ARRAY_SIZE = {EXP} EOF / <n 0>;

TOKENS = <(...)> {TOKEN}*;

STMTS = <@> {STMT}*;

SPLIT_TOKEN = !"," RAW_TOKEN;
SPLIT = <list> (EOF / {SPLIT_ITEM} ("," {SPLIT_ITEM})* EOF) ;
SPLIT_ITEM = {SPLIT_FLAG} / {SPLIT_PARM};
SPLIT_FLAG = :<> ':'{ID} "="? {SPLIT_PARM};
SPLIT_PARM = <<reparse parm>> {SPLIT_TOKEN*};
PARAN_LIST = "(" {SPLIT} ")";

PARM : "macro paramater" = 
   {STMT} EOF / {TOKEN} EOF / {EXP} EOF;

EOF = SPACING !_ ;

