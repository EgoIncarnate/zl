@hint_file "grammer.hint";
#@hint_file "grammer.allt";

TOP = <top> SPACING {STMT}+;

#
# C Statement
#

STMT : "statement" = 
      <<mid PARM>> {MID} ";"
    / <lcstmt> {CASE_LABEL} ":" {STMT}
    / <lstmt> {ID} ":" {STMT}
    / <if>    "if" "(" {EXP} ")" {STMT} ("else" {STMT})?
    / <switch> "switch" "(" {EXP} ")" {STMT}
    / <while> "while" "(" {EXP} ")" {STMT}
    / <do>    "do" {STMT} "while" "(" {EXP} ")" ";"
    / <for>   "for" "(" {<stmt> {TOKEN}+ / <noop>} ";" {EXP/<n 1>} ";" {<eblock> {EXP}/<noop>} ")" {STMT}
    / <foreach> "foreach" "(" {ID} "in" {EXP} ")" {STMT} # added for foreach testcase
    / <break>    "break" ";"
    / <continue> "continue" ";"
    / <return>   "return" {EXP}? ";"
    / <local_label> "__label__" {ID} ";"
    / <goto>     "goto" {ID} ";"
    / {BLOCK}
    / {MACRO} / {MAKE_MACRO}
    / {MODULE} / {IMPORT}
    / <include_file> "include_file" {STRING} ";"
    / <import_file> "import_file" {STRING} ";"
    / <fluid_binding> "fluid_binding" {ID} ";"
    / <fluid_label>   "fluid_label"   {ID} ";"
    / <fluid_syntax>  "fluid_syntax"  {ID} ";"
    / <make_inner_ns> "make_inner_ns" {ID} ";"
    / <make_user_type> "make_user_type" {ID} {TOKEN}? ";" # FIXME: TOKEN not right...
    / <declare_user_type> "declare_user_type" {ID} ";"
    / <make_subtype> "make_subtype" {ID} {ID} {ID}? ";"
    / <finalize_user_type> "finalize_user_type" {TOKEN} ";"
    / <associate_type> "associate_type" {TOKEN} ";"
    / <export> "export" {ID} ("," {ID})* ";"
    / <add_prop> "add_prop" {BASIC_ID} {SYNTAX_P} ";"
    / <template> "template" {ID} ";"
    / <empty> ("using"/"friend") TOKEN+ ";"
    / "__raw" {SEXP} ";"
    / <noop>   ";"
    / <extern> "extern" {STRING_L} (:<abi> ({STRING}/":"{STRING_L}))? ({BRACEL} / {STMT})
    / <once> "__once" {ID} ({BRACEL} / {STMT})
    / <stmt>   ({TOKEN_}+ {PARAN} {"const"}? {INIT_LIST}? {BRACE} / {TOKEN}+ ";")
#   / <stmt>   ({TOKEN_}+ ({PARAN} {BRACE} / {TOKEN}* ";") / ({PARAN} / {BRACE}) {TOKEN}* ";")
   ;

INIT_LIST =
  <init> ":" (<> {ID} {PARAN}) (<> "," {ID} {PARAN})*;

CASE_LABEL =
      <case> "case" {CASE_EXP}
    / <case> "default";

CASE_EXP = <exp> (!":" {TOKEN})+;

MACRO =
  <macro> "macro" {FANCY_ID} "(" {MATCH_LIST} ")" 
          (:<typed-parms> ":" "typed_parms" "(" ((<.> (<<mid TOKENS>> {MID})) / {TOKENS}) ")")?
          (:<id> ":" "id")?
          (:<free> ":" "(" {ID_LIST} ")" /) {BRACE}
  / <smacro> "smacro" {ID} "(" {MATCH_LIST} ")" (:<free> ":" "(" {ID_LIST} ")" /) {BRACE} ;

MAKE_MACRO  =
    <%> ({"make_macro"/"make_syntax_macro"}) {ID} {ID}? {:<> ':'{"w_snapshot"}}? ";";

MODULE = 
    <%> {"module"/"user_type"} {ID} (:<asm_hidden> ":" "asm_hidden")? ({<{...}> {BRACEL} } / ";");

IMPORT = 
    <import> "import" {ID} ";";

#ID_LIST =
#  <> ({ID} ",")* {ID}?;

FANCY_ID = "operator" {{'[]'} SPACING / {SYM}} / {ID};

ID_LIST =
  <> ({FANCY_ID} ("," {FANCY_ID})*)?;

#MATCH_LIST =
#  <> ({MATCH} ",")* {MATCH}?;
MATCH_LIST =
  <> ({MATCH} ("," {MATCH})*)?;

MATCH = <<mid>> {MID} / :<> ':'{ID} {<reparse> {ID} ("=" {SPLIT_PARM})?} / <reparse> {ID} ("=" {SPLIT_PARM})? ;

#
# C Token
#

TOKEN_ : "token'" =  
         <<mid PARM>> ({MID} !("`" / "::" / "<") / {SYM} / {'[]'} SPACING)
         / {STRUCT_UNION} / {ENUM} / {TYPEOF} / {SYNTAX}
         / {RAW} / {TEMPLATE_CALL} 
         / {BRACK} / {CONST}
         / {ID} / {SYM};

TOKEN : "token" = {TOKEN_} 
      / {PARAN} / {BRACE};

TEMPLATE_PARM = <<mid>> {MID} / <(...)> (!('>'/',') {TOKEN})+;
TEMPLATE_PARMS = <\<\>> ({TEMPLATE_PARM} ("," {TEMPLATE_PARM})*) / ;
TEMPLATE_ID = <<tid>> {BASIC_ID} '<' SPACING {TEMPLATE_PARMS} '>' SPACING;

# FIXME: Add support for hex-floats
CONST = <f> {([0-9]*'.'[0-9]+/[0-9]+'.')([eE][+-]?[0-9]+)?} {FLOATING_SUFFIX} SPACING
        / <n> {'0'[xX][0-9a-fA-F]+} {INT_SUFFIX} SPACING
        / <n> {[1-9][0-9]*} {INT_SUFFIX} SPACING
        / <n> {'0'[0-7]*} {INT_SUFFIX} SPACING
        / <s> {STRING}+ (<char>)
        / <s> ('L'{STRING})+ (<wchar_t>)
        / <c> {CHAR} (<char>)
        / <c> 'L'{CHAR} (<wchar_t>);

INT_SUFFIX = <unsigned-long-long> ([uU][lL][lL]/[lL][lL][uU])
           / <unsigned-long> ([uU][lL]/[lL][uU])
           / <long-long> [lL][lL] 
           / <unsigned> [uU] 
           / <long> [lL] 
           / <int>;

FLOATING_SUFFIX = <f> [fF] / <long-double> [lL] / <double>;

STRUCT_UNION = <%> {"struct"/"union"/"class"/".class"} 
                   {ID/}
                   (:<public> ":" "public" {ID})?
                   (:<fix_size> ":" "fix_size" "(" {EXP} ")" )? # used for test67
                   (:<fix_vtable_size> ":" "fix_vtable_size" "(" {EXP} ")" )? # used for test101
                   (:<vtable_slots> ":" "vtable_slots" "(" {EXP} ")" )?
                   (:<abi_ver> ":" "abi_ver" "(" {EXP} ")" )?
                   {<{...}> {BRACEL} }?;

ENUM = <enum> "enum" {ID/} 
              {<{,}> "{" ({ENUM_MEMBER} ",")* ({ENUM_MEMBER} ","?)? "}" }?;
ENUM_MEMBER = <> {ID} ("=" {ENUM_EXP})?;
ENUM_EXP = <exp> (!"," {TOKEN})+;

TYPEOF = <.typeof> "typeof" "(" {EXP} ")";

SYNTAX = 
    <syntax> "syntax" {SYNTAX_P}?
  / <raw_syntax> "raw_syntax" {SEXP_R}
  / <syntax> "syntax_d" (<<mid ->> {MID});

SYNTAX_P =
  <<reparse id MID_ID>> {ID} / <<reparse sym MID_SYM>> {SYM} / {ID} / {BRACE} / {PARAN}; # / {BRACK};
#   {ID} / {SYM} / {BRACE} / {PARAN}; # / {BRACK};

MID_ID = 
  <<mid ->> {MID} EOF / {ID};

MID_SYM = 
  <<mid ->> {SYM} EOF / {SYM};

SYNTAX_STR =
  ({SYNTAX_P} / <<reparse parm>> {RAW_TOKEN+}) EOF;

#
# Misc
#

EXP = <exp> {TOKEN}+;

INIT = <<mid>> {MID} / <init> {TOKEN}+;

BLOCK = <block> {BRACEL};

EBLOCK = <eblock> "(" {BRACEL} ")";

#
# Raw Tokens
#

RAW_TOKENS = {RAW_TOKEN*};

BRACE  = <<reparse {}>>  "{" {RAW_TOKENS} "}";
BRACEL = <<reparse @{}>> "{" {RAW_TOKENS} "}";
PARAN  = <<reparse ()>>  "(" {RAW_TOKENS} ")";
BRACK  = <<reparse []>>  "[" {RAW_TOKENS} "]";
ANGLE  = <<reparse \<\>>> '<' {(ANGLE / !'>' RAW_TOKEN)*} '>';

SEXP_R = <<reparse sexp SEXP>> '(' {SEXP_PART*} ')';
SEXP_PART = S_WSPACE / ANTIQUOTE / S_ID / SEXP_R;
S_WSPACE = ([\s]+ / '#' [^\n]* [\n])+;
S_ID = '"' {('\\'_/[^"])*} '"' / {('\\'_ / [^\s\(\)\#\"])+};

S_MID = <<mid ->> {ANTIQUOTE} / <<mid ->> {S_ID};

S_SPACING = S_WSPACE?;

SEXP = <> '(' S_SPACING {SPART}* ')';
SPART = ({S_FLAG} / {S_LIT_MID} / {S_MID} / {S_ID} / {SEXP_R}) S_SPACING;
S_FLAG = :<=> ':' ({SEXP} / !':'{S_ID});

# PROD TO FULLY PARSE SEXP
SEXP_FULL = <> '(' S_SPACING {SPART_FULL}* ')';
SPART_FULL = ({S_FLAG_FULL} / {S_LIT_MID} / {S_MID} / {S_ID} / {SEXP_FULL}) S_SPACING;
S_FLAG_FULL = :<=> ':' ({SEXP_FULL} / !':'{S_ID});

S_LIT_MID = <mid> '(' S_SPACING 'mid' S_SPACING ({S_ID} S_SPACING)+ ')';

TOKENS_SEXP = <> {SPART}*;
TOKENS_SEXP_FULL = <> {SPART_FULL}*;

# RAW_ID and CONST is not strictly needed but it will make reparsing
# the string more efficient
RAW_TOKEN = ANTIQUOTE / STRING / CHAR / BRACE / PARAN / BRACK / RAW_ID / CONST / WHITE_SPACE / [^\)\]\}];

#
# Lex Like Tokens
#

RAW_ID : "identifier" = 
  {[@$\a_][$\a_\d]*} SPACING;

BASIC_ID : "identifier" =
  <<mid>> {MID} / {RAW_ID};

ID_W_TEMPLATE = 
  {TEMPLATE_ID} / {BASIC_ID};

ID_W_NS : "identifer" =
  <<>> {ID_W_TEMPLATE} ("::" {ID_W_NS} = <::>)?;

ID_W_INNER = 
  <<>> {ID_W_NS} (("`" {ID_W_NS})+ = <`>)?;

ID =
  <fluid> "fluid" {ID} / {ID_W_INNER};

RAW = 
  "__raw" {SEXP_R};

TEMPLATE_CALL =
  <%> {"implicit_cast"/"implicit_ptr_cast"/"reinterpret_cast"} {ANGLE} {PARAN};

NUM : "number" = 
    {[\d]+('.'[\d]+)?} SPACING;

STRING_L = <<mid>> {MID} / {STRING};

STRING = '"' {('\\'_/[^"])*} '"' SPACING;

CHAR   = '\'' {('\\'_/[^'])+} '\'' SPACING;

#SYM : "symbol" = 
#    {[\y+^,;`]+/','} SPACING;

SYM : "symbol" =
   {'...' / '>>=' / '<<=' / '..' / '>>' / '<<' / '&&' / '||' / 
   '<=' / '>=' / '==' / '!=' / '++' / '--' / '->' / '::' /
   '+=' / '-=' / '*=' / '/=' / '%=' / '/=' / '&=' / '^=' / '|=' /
   '+'  / '-'  / '*'  / '/'  / '%'  / '/'  / '&'  / '^'  / '|' /
   '=' / '<' / '>' / '?' / ':' / ',' / '.' / '!' / '~'} SPACING;

WHITE_SPACE =
  ([\s]+ / COMMENT)+;

SPACING : "spacing" =
  WHITE_SPACE?;

COMMENT = 
    '//' [^\n]* [\n]
  / '#' [^\n]* [\n]
  / '/*' _* . '*/';

#
# 
#

MID = {ANTIQUOTE} / {RAW_ID};

#
# Antiquotes
#

SID = [\a_][\a_\d]*;

ANTIQUOTE = 
  <<antiquote>> '$' ({PARAN} / <<reparse parm>> {SID} SPACING);

#
# Special tokens
#

"[\a_.][\a\d_]*" = {_self} ![\a\d_] SPACING;
"[;,]" = {_self} SPACING;
"[\y]+" : "operator" = {_self} ![\y] SPACING;
"_" = {_self} SPACING;

#
# Productions used by macro expander
#

PARAN_EXP = {EBLOCK} / "(" {EXP} ")";

ARRAY_SIZE = {EXP} EOF / <n -1>;

TOKENS = <(...)> {TOKEN}*;

STMTS = <@> {STMT}*; # FIXME: Eventually remove

STMTE = {STMT} / <noop> EOF;

SPLIT_TOKEN = !"," RAW_TOKEN;
SPLIT = <.> (EOF / {SPLIT_ITEM} ("," {SPLIT_ITEM})* EOF) ;
SPLIT_ITEM = {SPLIT_FLAG} / {SPLIT_PARM};
SPLIT_FLAG = :<> ':'{ID} "="? {SPLIT_PARM};
SPLIT_PARM = <<reparse parm>> {SPLIT_TOKEN*};
PARAN_LIST = "(" {SPLIT} ")";

PARM : "macro paramater" = 
   {STMT} EOF / {PARM_};

PARM_ : "macro paramater" = 
   {TOKEN} EOF / <(...)> {TOKEN}+ EOF;


EOF = SPACING !_ ;

