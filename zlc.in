#!/usr/bin/perl

use Config;

use warnings;
use strict;

my $ZL = "@abs_top_srcdir@/zl";
my $ZL_H = "@abs_top_srcdir@/zl_h.h";
my $CPP_INCLUDE = "@abs_top_srcdir@/c++-include";
my $CPP_LIB = "@abs_top_srcdir@/libc++.o";

my $preprocess;
my $lang;
my $output;
my @files;
my @cpp_ops;
my @zls_ops;
my @zls_files;
#my @zl_ops;
my @temp_files;
my $save_temps = 0;
my $link = 1;
my $compile = 1;
my $gcc_abi = 0;

sub arg_w_parm ($) {
    my ($arg) = @_;
    my $parm;
    if (/^-$arg(.*)/) {
        if (length $1 > 0) {
            $parm = $1;
        } else {
            shift @ARGV;
            $parm = $ARGV[0];
            die "Missing argument for -$arg\n" 
                if (!defined $parm || $parm =~ /^-/) 
        }
        return $parm;
    } else {
        return undef;
    }
}

while (@ARGV) {
    local $_ = $ARGV[0];
    my $p;
    if ($_ eq '-no-pp') {
        $preprocess = 0;
        shift @ARGV;
    } elsif ($_ eq '-pp') {
        $preprocess = 1; #$preprocess == 0;
        shift @ARGV;
    } elsif ($_ eq '-E') {
        $preprocess = 2;
        $compile = 0;
        $link = 0;
        $output = '/dev/stdout' unless defined $output;
        shift @ARGV;
    } elsif ($p = arg_w_parm('x')) {
        $lang = $p;
        die "Unknown lang: $lang\n" unless $lang =~ /^(c|c\+\+|zl|zls)$/;
        shift @ARGV;
    } elsif ($p = arg_w_parm('o')) {
        $output = $p;
        push @zls_ops, '-o', $output;
        shift @ARGV;
    } elsif ($_ eq '-c') {
        push @zls_ops, $_;
        $link = 0;
        shift @ARGV;
    } elsif ($_ eq '-S') {
        push @zls_ops, $_;
        $link = 0;
        shift @ARGV;
    } elsif ($_ eq '-save-temps') {
        $save_temps = 1;
        shift @ARGV;
    } elsif ($_ eq '-gcc-abi') {
        $gcc_abi = 1;
        shift @ARGV;
    } elsif ($_ eq '-shared') {
        push @zls_ops, $_;
        shift @ARGV;
    } elsif (/^-g(.*)/) {
        push @zls_ops, $_;
        shift @ARGV;
    } elsif (/^-f(.*)/) {
        # ignore for now
        shift @ARGV;
    } elsif (/^-m(.*)/) {
        push @zls_ops, $_;
        shift @ARGV;
    } elsif (/^-O(.*)/) {
        push @zls_ops, $_;
        shift @ARGV;
    } elsif (/^-Wl(.*)/) {
        push @zls_ops, $_;
        shift @ARGV;
    } elsif (/^-W(.*)/) {
        # ignore for now
        shift @ARGV;
    } elsif ($p = arg_w_parm('D')) {
        push @cpp_ops, '-D', $p;
        shift @ARGV;
    } elsif ($_ eq '-I-') {
        push @cpp_ops, $_;
        shift @ARGV;
    } elsif ($p = arg_w_parm('I')) {
        push @cpp_ops, '-I', $p;
        shift @ARGV;
    } elsif ($p = arg_w_parm('L')) {
        push @zls_ops, '-L', $p;
        shift @ARGV;
    } elsif ($p = arg_w_parm('l')) {
        push @zls_ops, '-l', $p;
        shift @ARGV;
    } elsif (/^-/) {
        die "Unknown option: $_\n";
    } else {
        # The order of the args relative to the files can matter. Thus
        # we must preserve the order by grouping the args with the
        # file list.
        push @files, [[@zls_ops], $_];
        @zls_ops = ();
        shift @ARGV;
    }
}
my @final_zls_ops = @zls_ops;
@zls_ops = ();

my %ext_map = qw(c c i c ii c++ 
                 cc c++ cp c++ cxx c++ cpp c++ CPP c++ c++ c++ C c++
                 zl zl zls zls zlp c++);

foreach (@files) {
    my ($zls_ops, $file) = @$_;
    my ($base, $ext) = $file =~ /^(.+?)(?:\.([^.]+))?$/;
    my $l = $lang;
    if (!defined $l) {
        $l = $ext_map{$ext};
        $l = "obj" unless defined $l;
        #die "Unknown extension: $ext" unless defined $l;
    }
    my $pp = $preprocess;
    $pp = ($l eq 'c' || $l eq 'c++') && !($ext eq 'i' || $ext eq 'ii') if !defined $pp;
    my $orig_file = $file;
    my @local_cpp_ops = ('-I', $CPP_INCLUDE, '-D', '__cplusplus=1')
        if ($l eq 'c++');
    if ($pp) {
        $file = "$base.i";
        $file = $output if defined $preprocess && $preprocess == 2 && defined $output;
        system('zls', '-E', '-include', $ZL_H, '-x', 'c', '-D', '__zl=1',
               @local_cpp_ops, @cpp_ops, $orig_file, '-o', $file);
        die "FAILED: zls -E ...\n" unless $? == 0;
    }
    next unless $compile;
    my @zl_ops;
    push @zl_ops, '-xc' if $l eq 'c';
    push @zl_ops, '-xc++' if $l eq 'c++' && !$gcc_abi;
    push @zl_ops, '-xg++' if $l eq 'c++' && $gcc_abi;
    if ($l ne 'zls' && $l ne 'obj') {
        #print "$ZL @zl_ops $file\n";
        system($ZL, @zl_ops, $file);
        die "FAILED: $ZL @zl_ops $file\n" unless $? == 0;
        unlink $file unless $orig_file eq $file || $save_temps;
        push @zls_ops, @$zls_ops, "$base.zls";
        push @temp_files, "$base.zls";
    } else {
        push @zls_ops, @$zls_ops, $file;
    }
}
if ($compile) {
    push @zls_ops, @final_zls_ops;
    push @zls_ops, $CPP_LIB if $link;
    system('zls', @zls_ops);
    die "FAILED: zls @zls_ops\n" unless $? == 0;
}

unlink @temp_files unless $save_temps;

exit 0;
