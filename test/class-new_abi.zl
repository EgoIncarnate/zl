import_file "../class.zl";

.class ParseClassNewABI : public ParseClass {
  
  void init() {
    ParseClass::init`non_virtual();
    m = match(m, syntax _parent_ptr, replace_context(syntax _parent_ptr, context));
    m = match(m, syntax _child_ptr, replace_context(syntax _child_ptr, context));
  }

  void add_parent_info() {
    parse_class_var(partly_expand(replace(syntax {parent_n * _parent_ptr;}, m, mark), FieldPos, lenv),
                    struct_p);

    Syntax * p_init = replace(syntax {_parent_ptr = malloc(sizeof(parent_n));}, m, mark);
    need_constructor = true;
    need_copy_constructor = true;
    constructor_code->append(p_init);
    copy_constructor_code->append(p_init);
    Syntax * p_cleanup = replace(syntax {free(_parent_ptr);}, m, mark);
    need_destructor = true;
    destructor_code->append(p_cleanup);

    builder->add(replace(syntax {macro _parent (:this ths = this) {*ths->_parent_ptr;}}, m, mark));

    register_field(m->var(syntax _parent), 
                   replace(raw_syntax (parent_n), m, mark));

    // The setting of the child pointer needs to come after the
    // parent's constructor is called
    Syntax * p_init_2 = replace(syntax {_parent_ptr->_child_ptr = this;}, m, mark);
    constructor_code->append(p_init_2);
    copy_constructor_code->append(p_init_2);
    
    builder->add(replace(syntax {macro cast_up(p) {(*p).._parent_ptr;}}, m, mark));
    builder->add(replace(syntax {macro cast_down(p) {reinterpret_cast<name *>((*p).._child_ptr);}}, m, mark));
    builder->add(replace(syntax {make_subtype parent_n cast_up cast_down;}, m, mark));
  }

  void add_other_info() {
    ParseClass::add_other_info`non_virtual();
    parse_class_var(partly_expand(replace(syntax {void * _child_ptr;}, m, mark), FieldPos, lenv),
                    struct_p);
    Syntax * c_init = replace(syntax{_child_ptr = 0;}, m, mark);
    need_constructor = true;
    constructor_code->append(replace(syntax{_child_ptr = 0;}, m, mark));
    need_copy_constructor = true;
    copy_constructor_code->append(replace(syntax{_child_ptr = 0;}, m, mark));
  }
};

Syntax * parse_class_new_abi(Syntax * p, Environ * env) {
  ParseClassNewABI * pc = new ParseClassNewABI;
  return pc->parse(p, env, new_mark());
}

make_syntax_macro class parse_class_new_abi :w_snapshot;
