import_file "class.zl";

.class ParseClassGccABI : public ParseClass {

  Collect base_destructor_collect;
  Collect deleting_destructor_collect;
  bool need_deleting_destructor;
  bool in_parse_class_fun;

  virtual void init() {
    ParseClass::init`non_virtual();
    m = match(m, syntax _base_constructor, replace_context(syntax _base_constructor, context));
    m = match(m, syntax _base_destructor, replace_context(syntax _base_destructor, context));
    m = match(m, syntax _deleting_destructor, replace_context(syntax _deleting_destructor, context));
    m = match(m, syntax _VTableBase, replace_context(syntax _VTableBase, context));
    base_destructor_collect.virtual_override = false;
    base_destructor_collect.this_type = NULL;
    deleting_destructor_collect.virtual_override = false;
    deleting_destructor_collect.this_type = NULL;
    need_deleting_destructor = false;
    in_parse_class_fun = false;
  }
  
  virtual Syntax * parse_class_fun(Syntax * p, struct Collect * collect) {
    in_parse_class_fun = true;
    Syntax * err = NULL;
    //printf("MAYBE: %s %s\n", syntax_to_string(this->name), syntax_to_string(p));
    err = ParseClass::parse_class_fun`non_virtual(p, collect);
    if (err) goto finish;
    // Now we need to see if we are parsing a constructor or
    // destructor, if so we need to rename it to _base_* and
    // emit another copy to confirm to the gcc abi which expects it.
    // We also need to possible emit a deleting destructor.
    // The second copy of the destructor, however, is not virtual, so we
    // we need to pull that out.
    __shadow Match * m = match_args(m, raw_syntax (n @ :virtual :pure_virtual @rest), p);
    Syntax * name = expand_id(m->var(syntax n), lenv);
    Syntax * again = NULL;
    if (name->eq(syntax _constructor)) {
      //assert(collect == NULL);
      again = replace(raw_syntax(fun _base_constructor @rest), m, mark);
      err = ParseClass::parse_class_fun`non_virtual(again, NULL);
    } else if (name->eq(syntax _destructor)) {
      if (p->flag(syntax virtual) || (collect && collect->virtual_override))
        need_deleting_destructor = true;
      //printf("NOW WHAT?: %s\n", syntax_to_string(p));
      again = replace(raw_syntax(fun _base_destructor @rest), m, mark);
      //printf("AGAIN: %s %s\n", syntax_to_string(this->name), syntax_to_string(again));
      err = ParseClass::parse_class_fun`non_virtual(again, &base_destructor_collect);
      if (err) goto finish;
      if (!need_deleting_destructor) goto finish;
      SyntaxList * vflags = new_syntax_list();
      //if (p->flag(syntax virtual)) printf("V FLAG: %s\n", syntax_to_string(p->flag(syntax virtual)));
      //if (p->flag(syntax pure_virtual)) printf("PV FLAG: %s\n", syntax_to_string(p->flag(syntax pure_virtual)));
      vflags->append_flag(p->flag(syntax virtual));
      vflags->append_flag(p->flag(syntax pure_virtual));
      //printf("VFLAGS: %s\n", syntax_to_string(vflags));
      again = replace(raw_syntax(fun _deleting_destructor (.) (void) @$1), match_local(m, vflags, 0), mark);
      err = ParseClass::parse_class_fun`non_virtual(again, &deleting_destructor_collect);
    }
  finish:
    in_parse_class_fun = false;
    return err;
  }

  virtual Syntax * mk_method_defn(Match * m, Syntax * ptr_self,
                                  bool static_, bool inline_, bool virtual_override, 
                                  Syntax * this_type, SyntaxEnum * parms,
                                  bool w_body) {
    //printf(">1>%s<<\n", syntax_to_string(parms));
    SyntaxEnum * parms_copy = parms->clone();
    Syntax * res = 
      ParseClass::mk_method_defn`non_virtual(m,ptr_self,static_,inline_,virtual_override,
                                             this_type, parms_copy, w_body);
    if (!w_body || in_parse_class_fun) return res;
    Syntax * name = expand_id(m->var(syntax n), lenv);
    if (name->eq(syntax _constructor)) {
      SyntaxList * r = new_syntax_list();
      r->append(res);
      // now create base constructor body
      m = match(m, syntax n, replace(syntax _base_constructor, m, mark));
      //printf(">2>%s<<\n", syntax_to_string(parms));
      res = ParseClass::mk_method_defn`non_virtual(m,ptr_self,static_,inline_,false,
                                                   this_type, parms, w_body);
      r->append(res);
      return r;
    } else if (name->eq(syntax _destructor)) {
      SyntaxList * r = new_syntax_list();
      r->append(res);
     
      // now create base destructor body
      m = match(m, syntax n, replace(syntax _base_destructor, m, mark));
      res = ParseClass::mk_method_defn`non_virtual(m,ptr_self,static_,inline_,base_destructor_collect.virtual_override,
                                                   base_destructor_collect.this_type, parms, w_body);
      r->append(res);
      
      // now create deleting constructor body if needed
      if (!need_deleting_destructor) return r;
      Syntax * p;
      p = replace(syntax {void _deleting_destructor() {void * ptr = _destructor`non_virtual(); __raw(free (name) ptr);}}, 
                  m, mark);
      p = partly_expand(p, FieldPos, lenv);
      m = match_args(m, raw_syntax (n parms ret @ body @rest), p);
      m = match_args(m, raw_syntax (@parms), m->var(syntax parms));
      res = mk_method_defn(m, ptr_self, false, inline_, deleting_destructor_collect.virtual_override, 
                           deleting_destructor_collect.this_type, m->varl(syntax parms), m->var(syntax body));
      r->append(res);
      return r;
    }
    return res;
  }

  void create_vtable() {
    ParseClass::create_vtable`non_virtual();

    UnmarkedSyntax * wrapper = syntax {
      user_type _VTable_Wrapper {
        __raw(.struct _Data 
              ((long) _offset_to_top)
              ((.ptr (void)) _typeinfo)
              ((_VTable) _vtable));
        associate_type struct _Data;
        macro _up_cast (x) {&(*x).._vtable;}
        make_subtype _VTable _up_cast;
        macro _constructor(:this this) :typed_parms () {({(*this).._offset_to_top = 0; (*this).._typeinfo = 0;});}
      }
    };

    builder->add(replace(wrapper, m, mark));
    builder->add(replace(syntax {static _VTable_Wrapper _vtable;}, m, mark));
  }

  void add_static_vtable() {
    // do nothing vtable added in overridden create_vtable above
  }

};

extern "C"
Syntax * parse_class_gcc_abi(Syntax * p, Environ * env) {
  ParseClassGccABI * pc = new ParseClassGccABI;
  return pc->parse(p, env, NULL);
}

unsigned _abi_list_size = 1;
AbiInfo _abi_list[1] = {{"gcc", NULL, parse_class_gcc_abi, "gcc_abi_info", NULL}};

