(macro (` smacro syntax) (name @rest)
  (macro (` (mid name) syntax) (mid @rest)))

(smacro fluid_label (ID)
      (fluid_binding (` (mid ID) label)))

(smacro fluid_syntax (ID)
      (fluid_binding (` (mid ID) syntax)))

(fluid_binding this)
(fluid_label break)
(fluid_label continue)

(smacro lstmt (ID STMT)
  (@ (label (mid ID))
     (mid STMT)))

(smacro lcstmt (CASE STMT)
  (@ (mid CASE)
     (mid STMT)))

(smacro while (TEST BODY) (block 
    (local_label (fluid break))
    (local_label (fluid continue))
  (label continue)
    (if (not (mid TEST)) (goto (id break)))
    (mid BODY)
    (goto (id continue))
  (label break)))

(smacro do (BODY TEST) (block
    (local_label (fluid break))
    (local_label (fluid continue))
  (label continue)
    (mid BODY)
    (if (not (mid TEST)) (goto (id break)))
    (goto (id continue))
  (label break)))

(smacro for (INIT TEST POST BODY) (block
    (local_label (fluid break))
    (local_label (fluid continue))
    (mid INIT)
  (label loop)
    (if (not (mid TEST)) (goto (id break)))
    (mid BODY)
  (label continue)
    (mid POST)
    (goto (id loop))
  (label break)))

(smacro switch (EXP BODY) (block
    (local_label (fluid break))
    (.switch (mid EXP) (mid BODY))
  (label break)))

(smacro break ()
       (goto (id break)))

(smacro continue ()
       (goto (id continue)))

#(smacro "()" (...)
#    (exp ...))

#(smacro "{}" (...)
#    (block ...))

(smacro or (x y)
    (eif (mid x) (n 1) (mid y)))

(smacro and (x y)
    (eif (mid x) (mid y) (n 0)))

(smacro ? (test (pattern (":" if_true if_false)))
    (eif (mid test) (mid if_true) (mid if_false)))

(smacro -> (exp id)
    (member (deref (mid exp)) (mid id)))

(smacro preinc (x)
    (c-assign plus (mid x) (n 1)))

(smacro predec (x) 
    (c-assign minus (mid x) (n 1)))

(smacro += (lhs rhs) (c-assign plus (mid lhs) (mid rhs)))
(smacro -= (lhs rhs) (c-assign minus (mid lhs) (mid rhs)))
(smacro *= (lhs rhs) (c-assign times (mid lhs) (mid rhs)))
(smacro /= (lhs rhs) (c-assign div (mid lhs) (mid rhs)))
(smacro %= (lhs rhs) (c-assign mod (mid lhs) (mid rhs)))
(smacro &= (lhs rhs) (c-assign band (mid lhs) (mid rhs)))
(smacro |= (lhs rhs) (c-assign bor (mid lhs) (mid rhs)))
(smacro ^= (lhs rhs) (c-assign xor (mid lhs) (mid rhs)))
(smacro <<= (lhs rhs) (c-assign lshift (mid lhs) (mid rhs)))
(smacro >>= (lhs rhs) (c-assign rshift (mid lhs) (mid rhs)))

#(smacro postinc (x)
#    (block (stmt (id int) (id `x) (sym =) (id x))
#           (stmt (sym ++) (id x))
#           (stmt (id `x))))

#(make_inner_ns internal)
(make_inner_ns non_virtual)

#(macro h (x_h) () (times (literal 2) (mid x_h)))
#(macro g (x_g y_g) () (plus (mid x_g) (mid y_g)))
#(macro f (x_f) () (call (id g) (list (mid x_f) (literal 4))))

#(macro f (x_f) (times (literal 2) (mid x_f)))
#(macro g (x_g) (plus (literal 2) (call (id f) (list (mid x_g)))))


