//
// libc stuff
//

typedef typedef struct _IO_FILE FILE;
typedef unsigned size_t;
int printf (const char *, ...);
int snprintf(const char * str, size_t size, const char * format, ...);
macro NULL() {0;}
typedef int bool;
int strcmp(const char *s1, const char *s2);
macro offsetof(TYPE, MEMBER) {(size_t) &((TYPE *)0)->MEMBER;}

//
// Macro ABI
//

typedef struct EnvironSnapshot EnvironSnapshot;

typedef struct Mark Mark;
__ct_callback Mark * new_mark_f(EnvironSnapshot *);
macro new_mark() {new_mark_f(environ_snapshot());}
macro new_empty_mark() {new_mark_f(0);}

struct UnmarkedSyntax {};
user_type UnmarkedSyntax {
  finalize_user_type struct UnmarkedSyntax;
}

user_type Syntax;
__ct_callback Syntax * syntax_flag(Syntax *, UnmarkedSyntax *);
struct Syntax {};
user_type Syntax {
  finalize_user_type struct Syntax;
  macro to_unmarked (x) {(UnmarkedSyntax *)x;}
  make_subtype UnmarkedSyntax to_unmarked;
  export flag;
  macro flag(str, :this this) {syntax_flag(this, str);}
}

user_type SyntaxList;
__ct_callback SyntaxList * new_syntax_list();
__ct_callback int syntax_list_empty(const SyntaxList *);
__ct_callback void syntax_list_append(SyntaxList *, Syntax *);
struct SyntaxList {};
user_type SyntaxList {
  finalize_user_type struct SyntaxList;
  macro to_syntax (x) {(Syntax *)x;}
  make_subtype Syntax to_syntax;
  export empty, append;
  macro empty(:this this) {syntax_list_empty(this);}
  macro append(syn, :this this) {syntax_list_append(this, syn);}
}

user_type SyntaxEnum;
__ct_callback Syntax * syntax_enum_next(SyntaxEnum *);
struct SyntaxEnum {};
user_type SyntaxEnum {
  finalize_user_type struct SyntaxEnum;
  export next;
  macro next(:this this) {syntax_enum_next(this);}
}

user_type Match;
__ct_callback Match * match(Match *, UnmarkedSyntax * pattern, Syntax * with);
__ct_callback Match * match_args(Match *, UnmarkedSyntax * pattern, Syntax * with);
__ct_callback Match * match_local(Match *, ...);
__ct_callback Syntax * match_var(Match *, UnmarkedSyntax *);
__ct_callback SyntaxEnum * match_varl(Match *, UnmarkedSyntax *);
struct Match {};
user_type Match {
  finalize_user_type struct Match;
  export var, varl;
  macro var(str, :this this) {match_var(this, str);}
  macro varl(str, :this this) {match_varl(this, str);}
}

__ct_callback Syntax * replace(UnmarkedSyntax *, Match *, Mark *);

typedef struct Context Context;
__ct_callback Context * get_context(Syntax *);
__ct_callback Syntax * replace_context(UnmarkedSyntax *, Context *);

typedef struct Environ Environ;

typedef enum  {NoPos = 0, OtherPos = 1, TopLevel = 2, FieldPos = 4, 
               StmtDeclPos = 8, StmtPos = 16, ExpPos = 32} Position;
__ct_callback Syntax * partly_expand(Syntax *, Position pos, Environ *);
__ct_callback SyntaxEnum * partly_expand_list(SyntaxEnum *, Position pos, Environ *);
__ct_callback Syntax * pre_parse(Syntax *, Environ *);
__ct_callback Syntax * reparse(Syntax *, const char *, Environ *);

__ct_callback UnmarkedSyntax * string_to_syntax(const char * str);
__ct_callback const char * syntax_to_string(UnmarkedSyntax *);
__ct_callback void dump_syntax(UnmarkedSyntax *);

user_type UserTypeInfo;
user_type ModuleInfo;
__ct_callback UserTypeInfo * user_type_info(const Syntax *, Environ *);
__ct_callback ModuleInfo * user_type_module(UserTypeInfo *);
__ct_callback ModuleInfo * module_info(const Syntax *, Environ *);
__ct_callback SyntaxEnum * module_symbols(ModuleInfo *);
__ct_callback bool module_have_symbol(ModuleInfo *, const Syntax *);

struct UserTypeInfo {};
user_type UserTypeInfo {
  finalize_user_type struct UserTypeInfo;
  export module;
  macro module(:this this) {user_type_module(this);}
}

struct ModuleInfo {};
user_type ModuleInfo {
  finalize_user_type struct ModuleInfo; 
  export symbols, have_symbol;
  macro symbols(:this this) {module_symbols(this);}
  macro have_symbol(sym, :this this) {module_have_symbol(this, sym);}
}

__ct_callback Environ * environ_new_scope(Environ *);

__ct_callback size_t ct_value(const Syntax *, Environ *);

//
//
//

macro class_cast_up (child) {
  &(*child)..parent;
}

__need_snapshot Syntax * parse_class(Syntax * p, Environ * env);
make_syntax_macro class parse_class;

