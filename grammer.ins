(smacro fluid_label (ID)
      (fluid_binding (w/inner (mid ID) label)))

(smacro fluid_syntax (ID)
      (fluid_binding (w/inner (mid ID) syntax)))

(fluid_binding this)
(fluid_label continue)

(smacro while (TEST BODY)
     (loop (block 
             (local_label (fluid continue))
             (lstmt continue
               (if (mid TEST) (noop) (break)))
             (mid BODY))))

(smacro do (BODY TEST)
     (loop (block 
             (local_label (fluid continue))
             (mid BODY)
             (lstmt continue (mid TEST) (noop) (break)))))

(smacro for (INIT TEST POST BODY)
      (block 
               (mid INIT)
               (loop (block
                 (local_label (fluid continue))
                 (if (mid TEST) (noop) (break))
                 (mid BODY)
                 (lstmt continue
                   (mid POST))))))

(smacro continue ()
       (goto (id continue)))

#(smacro "()" (...)
#    (exp ...))

#(smacro "{}" (...)
#    (block ...))

(macro m (x y)
 (call f (list (mid x) (mid y))))

(smacro or (x y)
    (eif (mid x) (literal 1) (mid y)))

(smacro and (x y)
    (eif (mid x) (mid y) (literal 0)))

(smacro ? (test (pattern (":" if_true if_false)))
    (eif (mid test) (mid if_true) (mid if_false)))

(smacro -> (exp id)
    (member (deref (mid exp)) (mid id)))

(smacro ".[]" (x y)
    (deref (plus (mid x) (mid y))))

(smacro preinc (x)
    (plus_eq (mid x) (literal 1)))

(smacro predec (x)
    (minus_eq (mid x) (literal 1)))

#(smacro postinc (x)
#    (block (stmt (id int) (id `x) (sym =) (id x))
#           (stmt (sym ++) (id x))
#           (stmt (id `x))))

(make_inner_ns internal)
(make_inner_ns non_virtual)

#(macro h (x_h) () (times (literal 2) (mid x_h)))
#(macro g (x_g y_g) () (plus (mid x_g) (mid y_g)))
#(macro f (x_f) () (call (id g) (list (mid x_f) (literal 4))))

