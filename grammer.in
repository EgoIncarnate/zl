
TOP = <top> SPACING {STMT}+;

STMT : "statement" = 
      <<mid>> {MID} ";"
    / <lcstmt> {CASE_LABEL} ":" {STMT}
    / <lstmt> {TAGGED_LABEL} ":" {STMT}
    / <if>    "if" "(" {EXP} ")" {STMT} ("else" {STMT})?
    / <switch> "switch" "(" {EXP} ")" {STMT}
    / <while> "while" "(" {EXP} ")" {STMT}
#    / <loop>  "loop" {STMT}
    / <do>    "do" {STMT} "while" "(" {EXP} ")" ";"
    / <for>   "for" "(" {<stmt> {TOKEN}+ / <noop>} ";" {EXP/<literal 1>} ";" {<estmt> {EXP}/<noop>} ")" {STMT}
    / <break>    "break" ";"
    / <continue> "continue" ";"
    / <return>   "return" {EXP} ";"
    / <goto>     "goto" {EXP} ";"
    / {BLOCK}
    / {MAP}
    / <noop>   ";"
    / <stmt>   {TOKEN}* ({BRACE} / ";")
   ;

BLOCK = <block> "{" {STMT}* "}";
EBLOCK = <eblock> "(" "{" {STMT}* "}" ")";

EXP = <<mid>> {MID} / <exp> {TOKEN}+;
PARAN_EXP = {EBLOCK} / "(" {EXP} ")";

TOKEN = <<mid>> {MID} / 
#         {STRUCT_UNION} / {TYPEOF} / {EBLOCK} / {PARAN} / {BRACK} / <string> {STRING} 
         {STRUCT_UNION} / {TYPEOF} / {PARAN} / {BRACK} / <string> {STRING} 
         / <id> {ID} / <literal> {NUM} / <sym> {SYM};

RAW_TOKEN = <string> {STRING} / {BRACE} / {PARAN} / {BRACK} / {ID} / {NUM} / {SYM} / ";";

STRUCT_UNION = <%> {"struct"/"union"} {ID/} {<{...}> "{" {STMT}* "}" }?;

TYPEOF = <.typeof> "typeof" "(" {EXP} ")";

GROUP = BRACE / PARAN / BRACK;

BRACE = <{}> "{" {RAW_TOKEN*} "}";
PARAN = <()> "(" {RAW_TOKEN*} ")";
BRACK = <[]> "[" {RAW_TOKEN*} "]";

SPLIT_TOKEN = !"," RAW_TOKEN;
SPLIT = <(,)> ({<parm> {SPLIT_TOKEN*}} ("," {<parm> {SPLIT_TOKEN*}})+/{<parm> {SPLIT_TOKEN+}}/);

TOKENS = <(...)> {TOKEN}*;

STMTS = <slist> {STMT}*;

ID : "identifier" =
     <<mid>> {MID} / {[`]*[\a_]+[\a_\d]*} SPACING;

MID : "macro identifier" = 
     {[\a_]+[\a_\d]*} SPACING;

TAGGED_LABEL : "label" = 
      <label> {ID} SPACING
    / <local> [.] {ID} SPACING;

CASE_LABEL =
      <case> "case" {<exp> {CASE_EXP}}
    / <default> "default";

CASE_EXP = &":" / {TOKEN} CASE_EXP ;

NUM : "number" = 
    {[\d]+('.'[\d]+)?} SPACING;

STRING = 
     '"' ('\\'_/[^"]) '"' SPACING
   / '\'' ('\\'_/[^']) '\'' SPACING;

SYM : "symbol" = 
    {[\y+^,;`]+/','} SPACING;

"[\a_][\a\d_]*" = {_self} ![\a\d_] SPACING;
"[;,]" = {_self} SPACING;
"[\y]+" : "operator" = {_self} ![\y] SPACING;
"_" = {_self} SPACING;

SPACING : "spacing" =
   [\s]* COMMENT?
   ;

COMMENT = 
    '//' [^\n]* [\n] SPACING
  / '/*' _* . '*/' SPACING;

MAP =
  <map> "map" {ID} "(" {<> ({ID} ",")* {ID}?} ")" {BRACE} ;

PARM : "macro paramater" = {STMT} EOF / {TOKEN} EOF / {EXP} EOF;

EOF = SPACING !_ ;
