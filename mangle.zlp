import_file "prelude.zlh";
include_file "prelude-c++.zlh";

#include <assert.h>
#include <stdlib.h>
#include <stdarg.h>
#include <stdio.h>
#include <string.h>

#include "string_buf-zl.hpp"
#include "abi_info.hpp"

//
// For compression it is necessary to keep track of both the
// compressed (zipped) and full version of the name
//

struct DualStringBuf {
  StringBuf zipped;
  StringBuf full;
  void printf(const char * format, ...) {
    va_list ap;
    va_start(ap, format);
    zipped.vprintf(format, ap);
    full.vprintf(format, ap);
    va_end(ap);
  }
};

DualStringBuf & operator << (DualStringBuf & buf, const char * str) {
  buf.zipped << str;
  buf.full << str;
  return buf;
}

DualStringBuf & operator << (DualStringBuf & buf, char c) {
  buf.zipped << c;
  buf.full << c;
  return buf;
}

struct DualStart {
  unsigned zipped;
  unsigned full;
  DualStart(const DualStringBuf & d) 
    : zipped(d.zipped.size())
    , full(d.full.size()) {}
};

//
// Zipper: for compression
//

struct SubStr {
  const char * str;
  unsigned len;
};

class Zipper {
  unsigned seen_sz;
  SubStr seen[64];
  Zipper() : seen_sz(0) {}
  int reg(const char * s, const char * e);
  bool try_to_zip(const DualStart & start, DualStringBuf & d);
};

int Zipper::reg(const char * s, const char * e) {
  if (*s == 'N') {
    ++s;
    assert(e[-1] == 'E');
    --e;
  }
  unsigned len = e - s;
  unsigned i = 0;
  printf("REG::%.*s\n", len, s);
  for (; i != seen_sz; ++i) {
    printf("....: %s %d\n", seen[i].str, i);
    if (len == seen[i].len && memcmp(s, seen[i].str, len) == 0) {
      printf(".YES %d\n", i);
      return i;
    }
  }
  printf(".NO\n");
  assert(i < 64);
  seen[i].str = s;
  seen[i].len = len;
  seen_sz++;
  return -1;
}

void encode_zipped(StringBuf & buf, int num) {
  if (num == 0) 
    buf << "S_";
  else if (num - 1 < 10) 
    buf.printf("S%c_", '0' + num - 1);
  else if (num - 1 < 36)
    buf.printf("S%c_", 'A' + num - 1 - 10);
  else
    abort();
}

bool Zipper::try_to_zip(const DualStart & start, DualStringBuf & d) {
  int num = -1;
  num = reg(d.full.data(start.full), d.full.data_end());
  if (num != -1) {
    //printf(">>REPLACING: %s\n", d.zipped.data(start.zipped));
    //printf(">>         : %s\n", d.full.data(start.full));
    d.zipped.resize(start.zipped);
    encode_zipped(d.zipped, num);
    //printf(">>     with: %s\n", d.zipped.data(start.zipped));
    return true;
  }
  return false;
}

static const unsigned TOP = 1;
static const unsigned TYPE = 2;
static void uniq_name0(Symbol * sym, DualStringBuf & dual, Zipper & zipper, unsigned flags) const;
static inline void uniq_name(Symbol * sym, DualStringBuf & dual, Zipper & zipper, unsigned flags) const {
  uniq_name0(sym, dual, zipper, flags | TOP);
}

//
// encode_type and parms
// 

struct TypeMangle {
  const char * type;
  const char * name;
};
TypeMangle TYPE_MANGLE[] = {
  {"void","v"}, {"wchar_t", "w"}, {"bool", "b"}, {"char","c"}, 
  {"signed-char","a"}, {"unsigned-char","h"}, 
  {"short","s"}, {"unsigned-short","t"}, 
  {"int","i"}, {"unsigned-int","j"}, 
  {"long","l"}, {"unsigned-long","m"}, 
  {"long-long","x"}, {"unsigned-long-long","y"}, 
  {"float","f"}, {"double","d"}, {"long-double","e"}};
static unsigned TYPE_MANGLE_SIZE = sizeof(TYPE_MANGLE) / sizeof(TypeMangle);

static void encode_type(const Type * type0, DualStringBuf & dual, Zipper & zipper) const {
  DualStart dual_start(dual);
  bool try_to_zip = false;
  Type * type = type0->root();
  Type * subtype = type->subtype();
  if (!subtype) {
    const char * tag = type->tag();
    if (tag) {
      dual << "$" << tag[0]; // $s, $e, $c, or $u
      dual << type->uniq_name();
      // FIXME: zipped
    } else {
      const char * name = type->name();
      unsigned i;
      for (i = 0; i != TYPE_MANGLE_SIZE; ++i) 
        if (strcmp(name, TYPE_MANGLE[i].type) == 0) break;
      if (i != TYPE_MANGLE_SIZE) {
        dual << TYPE_MANGLE[i].name;
      } else {
        try_to_zip = true;
        uniq_name(type, dual, zipper, TYPE);
      }
    }
  } else if (type->is_qualified()) {
    try_to_zip = true;
    int qualifiers = type->qualifiers();
    const char * c;
    if (qualifiers & TypeQualifier_RESTRICT) dual << 'r';
    if (qualifiers & TypeQualifier_VOLATILE) dual << 'V';
    if (qualifiers & TypeQualifier_CONST)    dual << 'K';
    encode_type(subtype, dual, zipper);
  } else if (type->is_pointer()) {
    try_to_zip = true;
    dual << 'P';
    encode_type(subtype, dual, zipper);
  } else if (type->is_reference()) {
    try_to_zip = true;
    dual << 'R';
    encode_type(subtype, dual, zipper);
  } else {
    dual << '?';
  }
  if (try_to_zip)
    zipper.try_to_zip(dual_start, dual);
}

static void encode_parms(Symbol * sym, FunType * funt, DualStringBuf & dual, Zipper & zipper) const {
  unsigned num_parms = funt->num_parms();
  unsigned start = 0;
  if (sym->get_prop(syntax w_this)) start = 1;
  for (unsigned i = start; i < num_parms; ++i) {
    Type * pt = funt->parm_type(i);
    if (pt) {
      encode_type(pt, dual, zipper);
    } else { // A "..."
      dual << 'z';
    }
  }
  if (num_parms - start == 0)
    dual << 'v';
}

//
// get_op_name
//

struct OpMangle {
  const char * op;
  const char * name;
};

OpMangle OP_MANGLE[] = {
  {"==", "eq"}, {"!=", "ne"}, {"<",  "lt"}, {">",  "gt"}, {"<=", "le"}, {">=", "ge"},
  {"+", "pl"}, {"-", "mi"}, {"*", "ml"}, {"/", "dv"}, {"%", "rm"},
  {"<<", "ls"}, {">>", "rs"}, {"^", "eo"}, {"&", "an"}, {"|", "or"},
  {"+=", "pL"}, {"-=", "mI"}, {"*=", "mL"}, {"/=", "dV"}, {"%=", "rM"},
  {"<<=", "lS"}, {">>=", "rS"}, {"^=", "eO"}, {"&=", "aN"}, {"|=", "oR"},
  {"[]", "ix"}, {"()", "cl"}, {"_assign", "aS"},
  {"_constructor", "C1"}, {"_destructor", "D1"},
  {"_base_constructor", "C2"}, {"_base_destructor", "D2"}};
static unsigned OP_MANGLE_SIZE = sizeof(OP_MANGLE) / sizeof(OpMangle);

static const char * get_op_name(const char * name) {
  for (unsigned i = 0; i != OP_MANGLE_SIZE; ++i) 
    if (strcmp(name, OP_MANGLE[i].op) == 0) {
      return OP_MANGLE[i].name;
    }
  return NULL;
}

//
// uniq_name
//

static void uniq_name0(Symbol * sym, DualStringBuf & dual, Zipper & zipper, unsigned flags) const {
  bool top = flags & TOP;
  bool fancy = top && !(flags & TYPE);
  const char * name = sym->name();
  unsigned num = sym->num();
  Symbol * where = sym->where();
  bool nested = false;
  if (num == 0 && where) {
    nested = true;
    if (top) {
      dual << 'N';
      // check for const on this parm
      FunType * funt = NULL;
      if (fancy && (funt = sym->to_fun_type()) && sym->get_prop(syntax w_this)) {
        Type * type = funt->parm_type(0);
        Type * subtype = type->subtype();
        if (subtype->qualifiers() & TypeQualifier_CONST) {
          dual << 'K';
        }
      }
    }
    DualStart dual_start(dual);
    uniq_name0(where, dual, zipper, false);
    zipper.try_to_zip(dual_start, dual);
  }
  const char * op_name = fancy ? get_op_name(name) : NULL;
  if (op_name) {
    if (num == 0) {
      dual << op_name;
    } else {
      StringBuf tmp;
      tmp.printf("op$%s$$%u", op_name, num);
      StringObj * tmps = tmp.freeze();
      dual.printf("%d%s", tmps->size, tmps->str);
    }
  } else {
    if (num == 0) {
      dual.printf("%d%s", strlen(name), name); 
    } else {
      StringBuf tmp;
      tmp.printf("%s$$%u", name, num);
      StringObj * tmps = tmp.freeze();
      dual.printf("%d%s", tmps->size, tmps->str);
    }
  }
  if (top && nested)
    dual << 'E';
}

//
// "main"
//

extern "C" StringObj * to_external_name(Symbol * sym) {
  //printf("====================================\n");
  Zipper zipper;
  DualStringBuf dual;
  dual << "_Z";
  uniq_name(sym, dual, zipper, 0);
  FunType * funt = sym->to_fun_type();
  if (funt)
    encode_parms(sym, funt, dual, zipper);
  //printf("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n");
  return dual.zipped.freeze();
}

unsigned _abi_list_size = 1;
AbiInfo _abi_list[1] = {{"gcc", to_external_name, NULL}};

#include "string_buf-zl.cpp"
