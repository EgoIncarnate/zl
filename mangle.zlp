import_file "prelude.zlh";
include_file "prelude-c++.zlh";

#include <stdarg.h>
#include <stdio.h>

#include "string_buf-zl.hpp"
#include "mangler.hpp"

struct TypeMangle {
  const char * type;
  const char * name;
};
TypeMangle TYPE_MANGLE[] = {
  {"void","v"}, {"wchar_t", "w"}, {"bool", "b"}, {"char","c"}, 
  {"signed-char","a"}, {"unsigned-char","h"}, 
  {"short","s"}, {"unsigned-short","t"}, 
  {"int","i"}, {"unsigned-int","j"}, 
  {"long","l"}, {"unsigned-long","m"}, 
  {"long-long","x"}, {"unsigned-long-long","y"}, 
  {"float","f"}, {"double","d"}, {"long-double","e"}};
static unsigned TYPE_MANGLE_SIZE = sizeof(TYPE_MANGLE) / sizeof(TypeMangle);

static void encode_type(const Type * type0, StringBuf & buf) const {
  Type * type = type0->root();
  Type * subtype = type->subtype();
  if (!subtype) {
    const char * tag = type->tag();
    if (tag) {
      buf << "$" << tag[0]; // $s, $e, $c, or $u
      buf << type->uniq_name();
    } else {
      const char * name = type->uniq_name();
      unsigned i;
      for (i = 0; i != TYPE_MANGLE_SIZE; ++i) 
        if (strcmp(name, TYPE_MANGLE[i].type) == 0) break;
      if (i != TYPE_MANGLE_SIZE) {
        buf << TYPE_MANGLE[i].name;
      } else {
        buf.printf("%d%s", strlen(name), name);
      }
    }
  } else if (type->is_qualified()) {
    int qualifiers = type->qualifiers();
    if (qualifiers & TypeQualifier_RESTRICT) buf += "r";
    if (qualifiers & TypeQualifier_VOLATILE) buf += "V";
    if (qualifiers & TypeQualifier_CONST)    buf += "K";
    encode_type(subtype, buf);
  } else if (type->is_pointer()) {
    buf += "P";
    encode_type(subtype, buf);
  } else if (type->is_reference()) {
    buf += "R";
    encode_type(subtype, buf);
  } else {
    buf += "?";
  }
}

struct OpMangle {
  const char * op;
  const char * name;
};

OpMangle OP_MANGLE[] = {
  {"==", "eq"}, {"!=", "ne"}, {"<",  "lt"}, {">",  "gt"}, {"<=", "le"}, {">=", "ge"},
  {"+", "pl"}, {"-", "mi"}, {"*", "ml"}, {"/", "dv"}, {"%", "rm"},
  {"<<", "ls"}, {">>", "rs"}, {"^", "eo"}, {"&", "an"}, {"|", "or"},
  {"+=", "pL"}, {"-=", "mI"}, {"*=", "mL"}, {"/=", "dV"}, {"%=", "rM"},
  {"<<=", "lS"}, {">>=", "rS"}, {"^=", "eO"}, {"&=", "aN"}, {"|=", "oR"},
  {"[]", "ix"}, {"()", "cl"}};
static unsigned OP_MANGLE_SIZE = sizeof(OP_MANGLE) / sizeof(OpMangle);

static void asm_name(const char * name, StringBuf & o) {
  //printf("?%s\n", ~key->to_string());
  unsigned i;
  for (i = 0; i != OP_MANGLE_SIZE; ++i) 
    if (strcmp(name, OP_MANGLE[i].op) == 0) break;
  if (i != OP_MANGLE_SIZE/*key->ns == OPERATOR_NS*/) {
    //printf(stderr, "LIVE ONE\n");
    //assert(i != OP_MANGLE_SIZE);
    o << OP_MANGLE[i].name;
  } else {
    o.printf("%d%s", strlen(name), name);
  }
}

static bool uniq_name0(Symbol * sym, StringBuf & o) const {
  const char * name = sym->name();
  unsigned num = sym->num();
  Symbol * where = sym->where();
  if (num == 0 && where) {
    uniq_name0(where, o);
  }
  if (num == 0) {
    asm_name(name, o);
  } else {
    StringBuf tmp;
    asm_name(name, tmp);
    StringObj * tmps = tmp.freeze();
    o.printf("%d%s", tmps->size, tmps->str);
  }
  return num != NPOS;
}


static bool uniq_name(Symbol * sym, StringBuf & o) const {
  const char * name = sym->name();
  unsigned num = sym->num();
  Symbol * where = sym->where();
  bool nested_name = num == 0 && where;
  if (nested_name)
    o << "N";
  uniq_name0(sym, o);
  if (nested_name)
    o << "E";
  return num != NPOS;
}

static void encode_parms(Symbol * sym, FunType * funt, StringBuf & buf) const {
  unsigned num_parms = funt->num_parms();
  unsigned start = 0;
  if (sym->get_prop(syntax w_this)) start = 1;
  for (unsigned i = start; i < num_parms; ++i) {
    Type * pt = funt->parm_type(i);
    if (pt)
      encode_type(pt, buf);
    else // A "..."
      buf << "z";
  }
  if (num_parms - start == 0)
    buf << "v";
}

extern "C" StringObj * to_external_name(Symbol * sym) {
  StringBuf buf;
  buf << "_Z";
  uniq_name(sym, buf);
  FunType * funt = sym->to_fun_type();
  if (funt)
    encode_parms(sym, funt, buf);
  return buf.freeze();
}

unsigned _manglers_size = 1;
Mangler _manglers[1] = {{"gcc", to_external_name}};

#include "string_buf-zl.cpp"
